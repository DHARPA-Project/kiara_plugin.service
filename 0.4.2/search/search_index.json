{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"kiara plugin: service","text":"<p>This package contains a set of commonly used/useful modules, pipelines, types and metadata schemas for Kiara.</p>"},{"location":"#description","title":"Description","text":"<p>A plugin to create, run and manage a service for kiara functionality.</p>"},{"location":"#package-content","title":"Package content","text":""},{"location":"#module_types","title":"module_types","text":"<ul> <li><code>service.example</code>: A very simple example module; concatenate two strings.</li> </ul>"},{"location":"#kiara_model_types","title":"kiara_model_types","text":"<ul> <li><code>instance.internal_error</code>: A model describing an internal server-side error.</li> </ul>"},{"location":"#operations","title":"operations","text":"<ul> <li><code>service.example</code>: A very simple example module; concatenate two strings.</li> </ul>"},{"location":"#links","title":"Links","text":"<ul> <li>Documentation: https://DHARPA-Project.github.io/kiara_plugin.service</li> <li>Code: https://github.com/DHARPA-Project/kiara_plugin.service</li> </ul>"},{"location":"SUMMARY/","title":"SUMMARY","text":"<ul> <li>Home</li> <li>Package contents</li> <li>Usage</li> <li>Development</li> <li>API reference</li> </ul>"},{"location":"development/","title":"Development","text":""},{"location":"development/#prepare-development-environment","title":"Prepare development environment","text":""},{"location":"development/#using-conda-recommended","title":"Using conda (recommended)","text":"<pre><code>conda create -n service python=3.9\nconda activate service\nconda install -c conda-forge mamba   # this is optional, but makes everything install related much faster, if you don't use it, replace 'mamba' with 'conda' below\nmamba install -c conda-forge -c dharpa kiara\nmamba install -c conda-forge -c dharpa kiara_plugin.core_types kiara_plugin.tabular   # optional, adjust which plugin packages you depend on, those two are quite common\n</code></pre>"},{"location":"development/#using-python-venv","title":"Using Python venv","text":"<p>Later, alligator.</p>"},{"location":"development/#check-out-the-source-code","title":"Check out the source code","text":"<p>First, fork the kiara_plugin.service repository into your personal Github account.</p> <p>Then, use the resulting url (in my case: https://github.com/makkus/kiara_modules.service.git) to clone the repository locally:</p> <pre><code>https://github.com/&lt;YOUR_FORKED_GITHUB_ID&gt;/kiara_plugin.service\n</code></pre>"},{"location":"development/#install-the-kiara-plugin-package-into-it","title":"Install the kiara plugin package into it","text":"<pre><code>cd kiara_plugin.service\npip install -e '.[all_dev]'\n</code></pre> <p>Here we use the <code>-e</code> option for the <code>pip install</code> command. This installs the local folder as a package in development mode into the current environment. Development mode makes it so that if you change any of the files in this folder, the Python environment will pick it up automatically, and whenever you run anything in this environment the latest version of your code/files are used.</p> <p>We also install a few additional requirements  (the <code>[all_dev]</code> part in the command above) that are not strictly necessary for <code>kiara</code> itself, or this package, but help with various development-related tasks.</p>"},{"location":"development/#install-some-pre-commit-check-tooling-optional","title":"Install some pre-commit check tooling (optional)","text":"<p>This step is optional, but helps with keeping the code clean and CI from failing. By installing pre-commit hooks like here, whenever you do a <code>git commit</code> in this repo, a series of checks and cleanup tasks are run, until everything is in a state that will hopefully make Github Actions not complain when you push your changes.</p> <pre><code>pre-commit install\npre-commit install --hook-type commit-msg\n</code></pre> <p>In addition to some Python-specific checks and cleanup tasks, this will also check your commit message so it's in line with the suggested format: https://www.conventionalcommits.org/en/v1.0.0/</p>"},{"location":"development/#run-kiara","title":"Run kiara","text":"<p>To check if everything works as expected and you can start adding/changing code in this repository, run any <code>kiara</code> command:</p> <pre><code>kiara operation list -t service\n</code></pre> <p>If everything is set up correctly, the output of this command should contain a few operations that are implemented in this repository.</p>"},{"location":"usage/","title":"Usage","text":"<p>TO BE DONE</p>"},{"location":"info/SUMMARY/","title":"SUMMARY","text":"<ul> <li>module_types</li> <li>kiara_model_types</li> <li>operations</li> </ul>"},{"location":"info/kiara_model_types/","title":"kiara_model_types","text":""},{"location":"info/kiara_model_types/#kiara_info.kiara_model_types.instance.internal_error","title":"<code>instance.internal_error</code>","text":"<pre>                                                                                \n Documentation                                                                  \n    A model describing an internal server-side error.              \n              Author(s)                                                                      \n    Markus Binsteiner   markus@frkl.io                             \n Context                                                                        \n  Tags         service                                           \n               Labels       package: kiara_plugin.service                     \n               References   source_repo:                                      \n              https://github.com/DHARPA-Project/kiara_plugin\u2026   \n documentation:                                    \n              https://DHARPA-Project.github.io/kiara_plugin.\u2026   \n Python class                                                                   \n  python_class_name    InternalErrorModel                        \n               python_module_name   kiara_plugin.service.models               \n               full_name            kiara_plugin.service.models.InternalEr\u2026   \n              </pre>"},{"location":"info/module_types/","title":"module_types","text":""},{"location":"info/module_types/#kiara_info.module_types.service.example","title":"<code>service.example</code>","text":"<pre>                                                                                \n Documentation                                                                  \n    A very simple example module; concatenate two         \n                          strings.                                              \n                          The purpose of this modules is to show the main       \n                          elements of a                                         \n                          [KiaraModule][kiara.modules.KiaraModule]:             \n                        \u2022 the (optional) configuration class: must inherit   \n                       from                                               \n                       [KiaraModuleConfig][kiara.modules.KiaraModuleCo\u2026   \n                       and the config class must be set as the            \n                       _config_cls attribute on the KiaraModule class.    \n                       Configuration values can be retrieved via the      \n                       [self.get_config_value(key)][kiara.modules.Kiar\u2026   \n                       method                                             \n                        \u2022 the inputs description: must return a              \n                       dictionary, containing the input name(s) as        \n                       keys, and another dictionary containing            \n                       type_name information and documentation about      \n                       the input data as value                            \n                        \u2022 the outputs description: must return a             \n                       dictionary, containing the output name(s) as       \n                       keys, and another dictionary containing            \n                       type_name information and documentation about      \n                       the output data as value                           \n                        \u2022 the process method: this is where the actual       \n                       work gets done. Input data can be accessed via     \n                       inputs.get_value_data(key), results can be set     \n                       with the outputs.set_value(key, value) method      \n                          Example:                                              \n                        This example module can be tested on the             \n  commandline with the ``kiara run`` command:          \n  ```                                                  \n  kiara run core_types.example text_1=\"xxx\"            \n  text_2=\"yyy\"                                         \n  ```                                                  \n Author(s)                                                                      \n    Markus Binsteiner   markus@frkl.io                    \n Context                                                                        \n  Tags         service                                  \n                        Labels       package: kiara_plugin.service            \n                        References   source_repo:                             \n                       https://github.com/DHARPA-Project/kia\u2026   \n documentation:                           \n                       https://DHARPA-Project.github.io/kiar\u2026   \n Module config schema                                                           \n  Field       Type     Descript\u2026   Required   Default   \n   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                          constants   object   Value       no                   \n                                               constants                        \n                                               for this                         \n                                               module.                          \n                          defaults    object   Value       no                   \n                                               defaults                         \n                                               for this                         \n                                               module.                          \n                          separator   string   The         no         \" - \"     \n                                               seperator                        \n                                               between                          \n                                               the two                          \n                                               strings.                         \n                       Python class                                                                   \n  python_class_name    ExampleModule                    \n                        python_module_name   kiara_plugin.service.modules     \n                        full_name            kiara_plugin.service.modules.\u2026   \n                       Processing source code  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                       class ExampleModule(KiaraModule):                     \n \"\"\"A very simple example module; concatenate t\u2026   \n     The purpose of this modules is to show the mai\u2026   \n     - ***the (optional) configuration class***: mu\u2026   \n          on the `KiaraModule` class. Configuration\u2026   \n     - ***the inputs description***: must return a \u2026   \n          and documentation about the input data as\u2026   \n     - ***the outputs description***: must return a\u2026   \n          and documentation about the output data a\u2026   \n     - ***the ``process`` method***: this is where \u2026   \n          can be set with the ``outputs.set_value(k\u2026   \n     Example:                                          \n         This example module can be tested on the c\u2026   \n         ```                                           \n         kiara run core_types.example text_1=\"xxx\" \u2026   \n         ```                                           \n     \"\"\"                                               \n     _config_cls = ExampleModuleConfig                 \n     _module_type_name = \"service.example\"             \n def create_inputs_schema(                         \n         self,                                         \n     ) -&gt; ValueMapSchema:                              \n         inputs = {                                    \n \"text_1\": {\"type\": \"string\", \"doc\": \"T\u2026   \n \"text_2\": {\"type\": \"string\", \"doc\": \"T\u2026   \n         }                                             \n return inputs                                 \n def create_outputs_schema(                        \n         self,                                         \n     ) -&gt; ValueMapSchema:                              \n         outputs = {                                   \n \"text\": {                                 \n \"type\": \"string\",                     \n \"doc\": \"The concatenated text.\",      \n             }                                         \n         }                                             \n return outputs                                \n def process(self, inputs: ValueMap, outputs: V\u2026   \n         separator = self.get_config_value(\"separat\u2026   \n         text_1 = inputs.get_value_data(\"text_1\")      \n         text_2 = inputs.get_value_data(\"text_2\")      \n         result = text_1 + separator + text_2          \n         outputs.set_value(\"text\", result)             \n   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                                                                                \n</pre>"},{"location":"info/operations/","title":"operations","text":""},{"location":"info/operations/#kiara_info.operations.service.example","title":"<code>service.example</code>","text":"Documentation <p>A very simple example module; concatenate two strings.</p> <p>The purpose of this modules is to show the main elements of a [<code>KiaraModule</code>][kiara.modules.KiaraModule]:</p> <ul> <li>*the (optional) configuration class*: must inherit from [<code>KiaraModuleConfig</code>][kiara.modules.KiaraModuleConfig], and the config class must be set as the <code>_config_cls</code> attribute    on the <code>KiaraModule</code> class. Configuration values can be retrieved via the [<code>self.get_config_value(key)</code>][kiara.modules.KiaraModule.get_config_value] method</li> <li>*the inputs description*: must return a dictionary, containing the input name(s) as keys, and another dictionary containing type_name information    and documentation about the input data as value</li> <li>*the outputs description*: must return a dictionary, containing the output name(s) as keys, and another dictionary containing type_name information    and documentation about the output data as value</li> <li>*the <code>process</code> method*: this is where the actual work gets done. Input data can be accessed via <code>inputs.get_value_data(key)</code>, results    can be set with the <code>outputs.set_value(key, value)</code> method</li> </ul> <p>Example:</p> <pre><code>This example module can be tested on the commandline with the ``kiara run`` command:\n\n```\nkiara run core_types.example text_1=\"xxx\" text_2=\"yyy\"\n```\n</code></pre> Inputs field name type description required default text_1 string The first text. yes text_2 string The second text. yes Outputs field name type description required default text string The concatenated text. yes"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>kiara_plugin<ul> <li>service<ul> <li>data_types</li> <li>defaults</li> <li>interfaces<ul> <li>cli<ul> <li>service<ul> <li>commands</li> </ul> </li> </ul> </li> </ul> </li> <li>models</li> <li>modules</li> <li>openapi<ul> <li>controllers<ul> <li>jobs</li> <li>modules</li> <li>operations</li> <li>pipeline</li> <li>render</li> <li>values</li> <li>workflows</li> </ul> </li> <li>service</li> </ul> </li> <li>pipelines</li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/kiara_plugin/service/__init__/","title":"service","text":"<p>Top-level package for kiara_plugin.service.</p>"},{"location":"reference/kiara_plugin/service/__init__/#kiara_plugin.service-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/service/__init__/#kiara_plugin.service.KIARA_METADATA","title":"<code>KIARA_METADATA = {'authors': [{'name': __author__, 'email': __email__}], 'description': 'Kiara modules for: service', 'references': {'source_repo': {'desc': 'The module package git repository.', 'url': 'https://github.com/DHARPA-Project/kiara_plugin.service'}, 'documentation': {'desc': 'The url for the module package documentation.', 'url': 'https://DHARPA-Project.github.io/kiara_plugin.service/'}}, 'tags': ['service'], 'labels': {'package': 'kiara_plugin.service'}}</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/service/__init__/#kiara_plugin.service.find_modules","title":"<code>find_modules: KiaraEntryPointItem = (find_kiara_modules_under, 'kiara_plugin.service.modules')</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/service/__init__/#kiara_plugin.service.find_model_classes","title":"<code>find_model_classes: KiaraEntryPointItem = (find_kiara_model_classes_under, 'kiara_plugin.service.models')</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/service/__init__/#kiara_plugin.service.find_data_types","title":"<code>find_data_types: KiaraEntryPointItem = (find_data_types_under, 'kiara_plugin.service.data_types')</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/service/__init__/#kiara_plugin.service.find_pipelines","title":"<code>find_pipelines: KiaraEntryPointItem = (find_pipeline_base_path_for_module, 'kiara_plugin.service.pipelines', KIARA_METADATA)</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/service/__init__/#kiara_plugin.service-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/service/__init__/#kiara_plugin.service.get_version","title":"<code>get_version()</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/service/__init__.py</code> <pre><code>def get_version():\n    from pkg_resources import DistributionNotFound, get_distribution\n\n    try:\n        # Change here if project is renamed and does not equal the package name\n        dist_name = __name__\n        __version__ = get_distribution(dist_name).version\n    except DistributionNotFound:\n\n        try:\n            version_file = os.path.join(os.path.dirname(__file__), \"version.txt\")\n\n            if os.path.exists(version_file):\n                with open(version_file, encoding=\"utf-8\") as vf:\n                    __version__ = vf.read()\n            else:\n                __version__ = \"unknown\"\n\n        except (Exception):\n            pass\n\n        if __version__ is None:\n            __version__ = \"unknown\"\n\n    return __version__\n</code></pre>"},{"location":"reference/kiara_plugin/service/data_types/","title":"data_types","text":"<p>This module contains the value type classes that are used in the <code>kiara_plugin.service</code> package.</p>"},{"location":"reference/kiara_plugin/service/defaults/","title":"defaults","text":""},{"location":"reference/kiara_plugin/service/defaults/#kiara_plugin.service.defaults-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/service/defaults/#kiara_plugin.service.defaults.kiara_html_app_dirs","title":"<code>kiara_html_app_dirs = AppDirs('kiara-service', 'frkl')</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/service/defaults/#kiara_plugin.service.defaults.KIARA_MODULE_BASE_FOLDER","title":"<code>KIARA_MODULE_BASE_FOLDER = os.path.dirname(__file__)</code>  <code>module-attribute</code>","text":"<p>Marker to indicate the base folder for the <code>kiara_streamlit</code> module.</p>"},{"location":"reference/kiara_plugin/service/defaults/#kiara_plugin.service.defaults.KIARA_SERVICE_RESOURCES_FOLDER","title":"<code>KIARA_SERVICE_RESOURCES_FOLDER = os.path.join(KIARA_MODULE_BASE_FOLDER, 'resources')</code>  <code>module-attribute</code>","text":"<p>Default resources folder for this package.</p>"},{"location":"reference/kiara_plugin/service/models/","title":"models","text":"<p>This module contains the metadata (and other) models that are used in the <code>kiara_plugin.service</code> package.</p> <p>Those models are convenience wrappers that make it easier for kiara to find, create, manage and version metadata -- but also other type of models -- that is attached to data, as well as kiara modules.</p> <p>Metadata models must be a sub-class of kiara.metadata.MetadataModel. Other models usually sub-class a pydantic BaseModel or implement custom base classes.</p>"},{"location":"reference/kiara_plugin/service/models/#kiara_plugin.service.models-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/service/models/#kiara_plugin.service.models.InternalErrorModel","title":"<code>InternalErrorModel</code>","text":"<p>         Bases: <code>KiaraModel</code></p> <p>A model describing an internal server-side error.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/service/models.py</code> <pre><code>class InternalErrorModel(KiaraModel):\n\"\"\"A model describing an internal server-side error.\"\"\"\n\n    _kiara_model_id = \"instance.internal_error\"\n\n    @classmethod\n    def from_exception(cls, exception: Exception, status: Union[int, None] = None):\n\n        if status is None:\n            status = 500\n\n        return InternalErrorModel.construct(\n            status=status, msg=str(exception), exception=None\n        )\n\n    status: int = Field(description=\"The status code code.\")\n    msg: str = Field(description=\"The error message.\")\n    exception: Any = Field(\n        description=\"More details about the underlying error.\", default=None\n    )\n</code></pre>"},{"location":"reference/kiara_plugin/service/models/#kiara_plugin.service.models.InternalErrorModel-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/service/models/#kiara_plugin.service.models.InternalErrorModel.status","title":"<code>status: int = Field(description='The status code code.')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/service/models/#kiara_plugin.service.models.InternalErrorModel.msg","title":"<code>msg: str = Field(description='The error message.')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/service/models/#kiara_plugin.service.models.InternalErrorModel.exception","title":"<code>exception: Any = Field(description='More details about the underlying error.', default=None)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/service/models/#kiara_plugin.service.models.InternalErrorModel-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/service/models/#kiara_plugin.service.models.InternalErrorModel.from_exception","title":"<code>from_exception(exception: Exception, status: Union[int, None] = None)</code>  <code>classmethod</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/service/models.py</code> <pre><code>@classmethod\ndef from_exception(cls, exception: Exception, status: Union[int, None] = None):\n\n    if status is None:\n        status = 500\n\n    return InternalErrorModel.construct(\n        status=status, msg=str(exception), exception=None\n    )\n</code></pre>"},{"location":"reference/kiara_plugin/service/interfaces/__init__/","title":"interfaces","text":""},{"location":"reference/kiara_plugin/service/interfaces/cli/__init__/","title":"cli","text":""},{"location":"reference/kiara_plugin/service/interfaces/cli/service/__init__/","title":"service","text":""},{"location":"reference/kiara_plugin/service/interfaces/cli/service/commands/","title":"commands","text":"<p>Web-service related subcommands for the cli.</p>"},{"location":"reference/kiara_plugin/service/interfaces/cli/service/commands/#kiara_plugin.service.interfaces.cli.service.commands-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/service/interfaces/cli/service/commands/#kiara_plugin.service.interfaces.cli.service.commands.service","title":"<code>service(ctx)</code>","text":"<p>(Web-)service-related sub-commands.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/service/interfaces/cli/service/commands.py</code> <pre><code>@click.group()\n@click.pass_context\ndef service(ctx):\n\"\"\"(Web-)service-related sub-commands.\"\"\"\n</code></pre>"},{"location":"reference/kiara_plugin/service/interfaces/cli/service/commands/#kiara_plugin.service.interfaces.cli.service.commands.start","title":"<code>start(ctx, host: str)</code>","text":"<p>Start a kiara (web) service.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/service/interfaces/cli/service/commands.py</code> <pre><code>@service.command()\n@click.option(\n    \"--host\", help=\"The host to bind to.\", required=False, default=\"localhost:8080\"\n)\n@click.pass_context\ndef start(ctx, host: str):\n\"\"\"Start a kiara (web) service.\"\"\"\n\n    from kiara_plugin.service.openapi.service import KiaraOpenAPIService\n\n    try:\n        import uvloop\n\n        uvloop.install()\n    except Exception:\n        pass\n\n    kiara_api: KiaraAPI = ctx.obj.kiara_api\n    kiara_service = KiaraOpenAPIService(kiara_api=kiara_api)\n    from hypercorn.config import Config\n\n    config = Config()\n    config.bind = [host]\n\n    if is_develop():\n        config.use_reloader = True\n\n    from hypercorn.asyncio import serve\n\n    app = kiara_service.app()\n    asyncio.run(serve(app, config))  # type: ignore\n</code></pre>"},{"location":"reference/kiara_plugin/service/modules/__init__/","title":"modules","text":""},{"location":"reference/kiara_plugin/service/modules/__init__/#kiara_plugin.service.modules-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/service/modules/__init__/#kiara_plugin.service.modules.ExampleModuleConfig","title":"<code>ExampleModuleConfig</code>","text":"<p>         Bases: <code>KiaraModuleConfig</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/service/modules/__init__.py</code> <pre><code>class ExampleModuleConfig(KiaraModuleConfig):\n\n    separator: str = Field(\n        description=\"The seperator between the two strings.\", default=\" - \"\n    )\n</code></pre>"},{"location":"reference/kiara_plugin/service/modules/__init__/#kiara_plugin.service.modules.ExampleModuleConfig-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/service/modules/__init__/#kiara_plugin.service.modules.ExampleModuleConfig.separator","title":"<code>separator: str = Field(description='The seperator between the two strings.', default=' - ')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/service/modules/__init__/#kiara_plugin.service.modules.ExampleModule","title":"<code>ExampleModule</code>","text":"<p>         Bases: <code>KiaraModule</code></p> <p>A very simple example module; concatenate two strings.</p> <p>The purpose of this modules is to show the main elements of a <code>KiaraModule</code>:</p> <ul> <li>the (optional) configuration class: must inherit from <code>KiaraModuleConfig</code>, and the config class must be set as the <code>_config_cls</code> attribute      on the <code>KiaraModule</code> class. Configuration values can be retrieved via the <code>self.get_config_value(key)</code> method</li> <li>the inputs description: must return a dictionary, containing the input name(s) as keys, and another dictionary containing type_name information      and documentation about the input data as value</li> <li>the outputs description: must return a dictionary, containing the output name(s) as keys, and another dictionary containing type_name information      and documentation about the output data as value</li> <li>the <code>process</code> method: this is where the actual work gets done. Input data can be accessed via <code>inputs.get_value_data(key)</code>, results      can be set with the <code>outputs.set_value(key, value)</code> method</li> </ul> Example <p>This example module can be tested on the commandline with the <code>kiara run</code> command:</p> <pre><code>kiara run core_types.example text_1=\"xxx\" text_2=\"yyy\"\n</code></pre> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/service/modules/__init__.py</code> <pre><code>class ExampleModule(KiaraModule):\n\"\"\"A very simple example module; concatenate two strings.\n\n    The purpose of this modules is to show the main elements of a [`KiaraModule`][kiara.modules.KiaraModule]:\n\n    - ***the (optional) configuration class***: must inherit from [`KiaraModuleConfig`][kiara.modules.KiaraModuleConfig], and the config class must be set as the `_config_cls` attribute\n         on the `KiaraModule` class. Configuration values can be retrieved via the [`self.get_config_value(key)`][kiara.modules.KiaraModule.get_config_value] method\n    - ***the inputs description***: must return a dictionary, containing the input name(s) as keys, and another dictionary containing type_name information\n         and documentation about the input data as value\n    - ***the outputs description***: must return a dictionary, containing the output name(s) as keys, and another dictionary containing type_name information\n         and documentation about the output data as value\n    - ***the ``process`` method***: this is where the actual work gets done. Input data can be accessed via ``inputs.get_value_data(key)``, results\n         can be set with the ``outputs.set_value(key, value)`` method\n\n    Example:\n\n        This example module can be tested on the commandline with the ``kiara run`` command:\n\n        ```\n        kiara run core_types.example text_1=\"xxx\" text_2=\"yyy\"\n        ```\n    \"\"\"\n\n    _config_cls = ExampleModuleConfig\n    _module_type_name = \"service.example\"\n\n    def create_inputs_schema(\n        self,\n    ) -&gt; ValueMapSchema:\n\n        inputs = {\n            \"text_1\": {\"type\": \"string\", \"doc\": \"The first text.\"},\n            \"text_2\": {\"type\": \"string\", \"doc\": \"The second text.\"},\n        }\n\n        return inputs\n\n    def create_outputs_schema(\n        self,\n    ) -&gt; ValueMapSchema:\n\n        outputs = {\n            \"text\": {\n                \"type\": \"string\",\n                \"doc\": \"The concatenated text.\",\n            }\n        }\n        return outputs\n\n    def process(self, inputs: ValueMap, outputs: ValueMap) -&gt; None:\n\n        separator = self.get_config_value(\"separator\")\n\n        text_1 = inputs.get_value_data(\"text_1\")\n        text_2 = inputs.get_value_data(\"text_2\")\n\n        result = text_1 + separator + text_2\n        outputs.set_value(\"text\", result)\n</code></pre>"},{"location":"reference/kiara_plugin/service/modules/__init__/#kiara_plugin.service.modules.ExampleModule-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/service/modules/__init__/#kiara_plugin.service.modules.ExampleModule._config_cls","title":"<code>_config_cls = ExampleModuleConfig</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/service/modules/__init__/#kiara_plugin.service.modules.ExampleModule-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/service/modules/__init__/#kiara_plugin.service.modules.ExampleModule.create_inputs_schema","title":"<code>create_inputs_schema() -&gt; ValueMapSchema</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/service/modules/__init__.py</code> <pre><code>def create_inputs_schema(\n    self,\n) -&gt; ValueMapSchema:\n\n    inputs = {\n        \"text_1\": {\"type\": \"string\", \"doc\": \"The first text.\"},\n        \"text_2\": {\"type\": \"string\", \"doc\": \"The second text.\"},\n    }\n\n    return inputs\n</code></pre>"},{"location":"reference/kiara_plugin/service/modules/__init__/#kiara_plugin.service.modules.ExampleModule.create_outputs_schema","title":"<code>create_outputs_schema() -&gt; ValueMapSchema</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/service/modules/__init__.py</code> <pre><code>def create_outputs_schema(\n    self,\n) -&gt; ValueMapSchema:\n\n    outputs = {\n        \"text\": {\n            \"type\": \"string\",\n            \"doc\": \"The concatenated text.\",\n        }\n    }\n    return outputs\n</code></pre>"},{"location":"reference/kiara_plugin/service/modules/__init__/#kiara_plugin.service.modules.ExampleModule.process","title":"<code>process(inputs: ValueMap, outputs: ValueMap) -&gt; None</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/service/modules/__init__.py</code> <pre><code>def process(self, inputs: ValueMap, outputs: ValueMap) -&gt; None:\n\n    separator = self.get_config_value(\"separator\")\n\n    text_1 = inputs.get_value_data(\"text_1\")\n    text_2 = inputs.get_value_data(\"text_2\")\n\n    result = text_1 + separator + text_2\n    outputs.set_value(\"text\", result)\n</code></pre>"},{"location":"reference/kiara_plugin/service/openapi/__init__/","title":"openapi","text":""},{"location":"reference/kiara_plugin/service/openapi/__init__/#kiara_plugin.service.openapi-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/service/openapi/__init__/#kiara_plugin.service.openapi.OperationControllerHtml","title":"<code>OperationControllerHtml</code>","text":"<p>         Bases: <code>Controller</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/service/openapi/__init__.py</code> <pre><code>class OperationControllerHtml(Controller):\n    path = \"/operation\"\n\n    @get(path=\"/{operation_name:str}\", media_type=MediaType.HTML)\n    def get_operation(self, operation_name: str, kiara: Kiara) -&gt; str:\n\n        op_info = kiara.context_info.operations.type_infos.get(operation_name)  # type: ignore\n        return op_info.create_html()\n\n    @post(\"/search_operation\", media_type=MediaType.HTML)\n    def search_operation(self, search_term: str, kiara: Kiara) -&gt; str:\n\n        for op in kiara.context_info.operations:\n            pass\n\n        return \"xxx\"\n</code></pre>"},{"location":"reference/kiara_plugin/service/openapi/__init__/#kiara_plugin.service.openapi.OperationControllerHtml-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/service/openapi/__init__/#kiara_plugin.service.openapi.OperationControllerHtml.path","title":"<code>path = '/operation'</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/service/openapi/__init__/#kiara_plugin.service.openapi.OperationControllerHtml-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/service/openapi/__init__/#kiara_plugin.service.openapi.OperationControllerHtml.get_operation","title":"<code>get_operation(operation_name: str, kiara: Kiara) -&gt; str</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/service/openapi/__init__.py</code> <pre><code>@get(path=\"/{operation_name:str}\", media_type=MediaType.HTML)\ndef get_operation(self, operation_name: str, kiara: Kiara) -&gt; str:\n\n    op_info = kiara.context_info.operations.type_infos.get(operation_name)  # type: ignore\n    return op_info.create_html()\n</code></pre>"},{"location":"reference/kiara_plugin/service/openapi/__init__/#kiara_plugin.service.openapi.OperationControllerHtml.search_operation","title":"<code>search_operation(search_term: str, kiara: Kiara) -&gt; str</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/service/openapi/__init__.py</code> <pre><code>@post(\"/search_operation\", media_type=MediaType.HTML)\ndef search_operation(self, search_term: str, kiara: Kiara) -&gt; str:\n\n    for op in kiara.context_info.operations:\n        pass\n\n    return \"xxx\"\n</code></pre>"},{"location":"reference/kiara_plugin/service/openapi/__init__/#kiara_plugin.service.openapi.DataTypeRequest","title":"<code>DataTypeRequest</code>","text":"<p>         Bases: <code>BaseModel</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/service/openapi/__init__.py</code> <pre><code>class DataTypeRequest(BaseModel):\n\n    data_type: str = Field(description=\"The data type.\", default=\"any\")\n</code></pre>"},{"location":"reference/kiara_plugin/service/openapi/__init__/#kiara_plugin.service.openapi.DataTypeRequest-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/service/openapi/__init__/#kiara_plugin.service.openapi.DataTypeRequest.data_type","title":"<code>data_type: str = Field(description='The data type.', default='any')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/service/openapi/__init__/#kiara_plugin.service.openapi.RenderRequest","title":"<code>RenderRequest</code>","text":"<p>         Bases: <code>BaseModel</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/service/openapi/__init__.py</code> <pre><code>class RenderRequest(BaseModel):\n    class Config:\n        extra = Extra.allow\n\n    target_id: str = Field(description=\"The id of the target element.\")\n    field_name: str = Field(description=\"The field name.\")\n    render_conf: Union[Dict[str, Any], None] = Field(\n        description=\"The scene render config.\", default=None\n    )\n</code></pre>"},{"location":"reference/kiara_plugin/service/openapi/__init__/#kiara_plugin.service.openapi.RenderRequest-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/service/openapi/__init__/#kiara_plugin.service.openapi.RenderRequest.target_id","title":"<code>target_id: str = Field(description='The id of the target element.')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/service/openapi/__init__/#kiara_plugin.service.openapi.RenderRequest.field_name","title":"<code>field_name: str = Field(description='The field name.')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/service/openapi/__init__/#kiara_plugin.service.openapi.RenderRequest.render_conf","title":"<code>render_conf: Union[Dict[str, Any], None] = Field(description='The scene render config.', default=None)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/service/openapi/__init__/#kiara_plugin.service.openapi.RenderRequest-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/service/openapi/__init__/#kiara_plugin.service.openapi.RenderRequest.Config","title":"<code>Config</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/service/openapi/__init__.py</code> <pre><code>class Config:\n    extra = Extra.allow\n</code></pre>"},{"location":"reference/kiara_plugin/service/openapi/__init__/#kiara_plugin.service.openapi.RenderRequest.Config-attributes","title":"Attributes","text":"<code>extra = Extra.allow</code> <code>instance-attribute</code> <code>class-attribute</code> \u00b6"},{"location":"reference/kiara_plugin/service/openapi/__init__/#kiara_plugin.service.openapi.DataTypeModel","title":"<code>DataTypeModel</code>","text":"<p>         Bases: <code>BaseModel</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/service/openapi/__init__.py</code> <pre><code>class DataTypeModel(BaseModel):\n\n    field_name: str = Field(description=\"The field name.\")\n    data_type: str = Field(description=\"The data type.\")\n    type_config: Dict[str, str] = Field(\n        description=\"The (optional) data type configuration.\", default_factory=dict\n    )\n</code></pre>"},{"location":"reference/kiara_plugin/service/openapi/__init__/#kiara_plugin.service.openapi.DataTypeModel-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/service/openapi/__init__/#kiara_plugin.service.openapi.DataTypeModel.field_name","title":"<code>field_name: str = Field(description='The field name.')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/service/openapi/__init__/#kiara_plugin.service.openapi.DataTypeModel.data_type","title":"<code>data_type: str = Field(description='The data type.')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/service/openapi/__init__/#kiara_plugin.service.openapi.DataTypeModel.type_config","title":"<code>type_config: Dict[str, str] = Field(description='The (optional) data type configuration.', default_factory=dict)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/service/openapi/service/","title":"service","text":""},{"location":"reference/kiara_plugin/service/openapi/service/#kiara_plugin.service.openapi.service-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/service/openapi/service/#kiara_plugin.service.openapi.service.T","title":"<code>T = TypeVar('T')</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/service/openapi/service/#kiara_plugin.service.openapi.service.logger","title":"<code>logger = structlog.getLogger()</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/service/openapi/service/#kiara_plugin.service.openapi.service.yaml","title":"<code>yaml = YAML(typ='safe')</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/service/openapi/service/#kiara_plugin.service.openapi.service-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/service/openapi/service/#kiara_plugin.service.openapi.service.KiaraModelResponse","title":"<code>KiaraModelResponse</code>","text":"<p>         Bases: <code>Response</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/service/openapi/service.py</code> <pre><code>class KiaraModelResponse(Response):\n    @classmethod\n    def serializer(cls, value: Any) -&gt; Dict[str, Any]:\n        if isinstance(value, KiaraModel):\n            return value.dict()\n        return super().serializer(value)\n\n    def render(self, content: Any) -&gt; bytes:\n\"\"\"\n        Handles the rendering of content T into a bytes string.\n        Args:\n            content: An arbitrary value of type T\n\n        Returns:\n            An encoded bytes string\n        \"\"\"\n        try:\n            if (\n                content is None\n                or content is NoReturn\n                and (\n                    self.status_code &lt; 100\n                    or self.status_code in {HTTP_204_NO_CONTENT, HTTP_304_NOT_MODIFIED}\n                )\n            ):\n                return b\"\"\n            if self.media_type == MediaType.JSON:\n                return dumps(\n                    content,\n                    default=self.serializer,\n                    option=OPT_SERIALIZE_NUMPY\n                    | OPT_OMIT_MICROSECONDS\n                    | OPT_NON_STR_KEYS,\n                )\n            if isinstance(content, OpenAPI):\n                content_dict = content.dict(by_alias=True, exclude_none=True)\n                if self.media_type == OpenAPIMediaType.OPENAPI_YAML:\n                    encoded = yaml.dump(content_dict).encode(\"utf-8\")\n                    return cast(\"bytes\", encoded)\n                return dumps(\n                    content_dict,\n                    option=OPT_INDENT_2 | OPT_OMIT_MICROSECONDS | OPT_NON_STR_KEYS,\n                )\n            return super().render(content)\n        except (AttributeError, ValueError, TypeError) as e:\n            raise ImproperlyConfiguredException(\n                \"Unable to serialize response content\"\n            ) from e\n</code></pre>"},{"location":"reference/kiara_plugin/service/openapi/service/#kiara_plugin.service.openapi.service.KiaraModelResponse-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/service/openapi/service/#kiara_plugin.service.openapi.service.KiaraModelResponse.serializer","title":"<code>serializer(value: Any) -&gt; Dict[str, Any]</code>  <code>classmethod</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/service/openapi/service.py</code> <pre><code>@classmethod\ndef serializer(cls, value: Any) -&gt; Dict[str, Any]:\n    if isinstance(value, KiaraModel):\n        return value.dict()\n    return super().serializer(value)\n</code></pre>"},{"location":"reference/kiara_plugin/service/openapi/service/#kiara_plugin.service.openapi.service.KiaraModelResponse.render","title":"<code>render(content: Any) -&gt; bytes</code>","text":"<p>Handles the rendering of content T into a bytes string.</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>Any</code> <p>An arbitrary value of type T</p> required <p>Returns:</p> Type Description <code>bytes</code> <p>An encoded bytes string</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/service/openapi/service.py</code> <pre><code>def render(self, content: Any) -&gt; bytes:\n\"\"\"\n    Handles the rendering of content T into a bytes string.\n    Args:\n        content: An arbitrary value of type T\n\n    Returns:\n        An encoded bytes string\n    \"\"\"\n    try:\n        if (\n            content is None\n            or content is NoReturn\n            and (\n                self.status_code &lt; 100\n                or self.status_code in {HTTP_204_NO_CONTENT, HTTP_304_NOT_MODIFIED}\n            )\n        ):\n            return b\"\"\n        if self.media_type == MediaType.JSON:\n            return dumps(\n                content,\n                default=self.serializer,\n                option=OPT_SERIALIZE_NUMPY\n                | OPT_OMIT_MICROSECONDS\n                | OPT_NON_STR_KEYS,\n            )\n        if isinstance(content, OpenAPI):\n            content_dict = content.dict(by_alias=True, exclude_none=True)\n            if self.media_type == OpenAPIMediaType.OPENAPI_YAML:\n                encoded = yaml.dump(content_dict).encode(\"utf-8\")\n                return cast(\"bytes\", encoded)\n            return dumps(\n                content_dict,\n                option=OPT_INDENT_2 | OPT_OMIT_MICROSECONDS | OPT_NON_STR_KEYS,\n            )\n        return super().render(content)\n    except (AttributeError, ValueError, TypeError) as e:\n        raise ImproperlyConfiguredException(\n            \"Unable to serialize response content\"\n        ) from e\n</code></pre>"},{"location":"reference/kiara_plugin/service/openapi/service/#kiara_plugin.service.openapi.service.KiaraOpenAPIService","title":"<code>KiaraOpenAPIService</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/service/openapi/service.py</code> <pre><code>class KiaraOpenAPIService:\n    def __init__(self, kiara_api: KiaraAPI):\n\n        self._kiara_api: KiaraAPI = kiara_api\n        self._app: Union[Starlite, None] = None\n        self._resources_base: Path = Path(KIARA_SERVICE_RESOURCES_FOLDER)\n\n    def app(self) -&gt; Starlite:\n        if self._app is not None:\n            return self._app\n\n        from starlite import Router\n\n        value_router = Router(path=\"/data\", route_handlers=[ValueControllerJson])\n        module_router = Router(path=\"/modules\", route_handlers=[ModuleControllerJson])\n        operation_router = Router(\n            path=\"/operations\", route_handlers=[OperationControllerJson]\n        )\n        job_router = Router(path=\"/jobs\", route_handlers=[JobControllerJson])\n        render_router = Router(path=\"/render\", route_handlers=[RenderControllerJson])\n        workflow_router = Router(\n            path=\"/workflows\", route_handlers=[WorkflowControllerJson]\n        )\n        pipeline_router = Router(\n            path=\"/pipelines\", route_handlers=[PipelineControllerJson]\n        )\n\n        # info_router_html = Router(\n        #     path=\"/html/info\", route_handlers=[OperationControllerHtml]\n        # )\n        # Router(path=\"/html/values\", route_handlers=[ValueControllerHtmx])\n        # Router(path=\"/html/operations\", route_handlers=[OperationControllerHtmx])\n\n        route_handlers: List[ControllerRouterHandler] = []\n        route_handlers.append(value_router)\n        route_handlers.append(module_router)\n        route_handlers.append(operation_router)\n        route_handlers.append(job_router)\n        route_handlers.append(render_router)\n        route_handlers.append(workflow_router)\n        route_handlers.append(pipeline_router)\n\n        # route_handlers.append(value_router_htmx)\n        # route_handlers.append(operation_router_htmx)\n\n        static_dir = self._resources_base / \"static\"\n\n        static_file_config = [\n            StaticFilesConfig(directories=[static_dir], path=\"/static\")\n        ]\n        self._template_registry: TemplateRegistry = TemplateRegistry()\n\n        environment = self._template_registry.environment\n\n        class KiaraTemplateEngine(TemplateEngineProtocol[JinjaTemplate]):\n\"\"\"Template engine using the default kiara template registry.\"\"\"\n\n            def __init__(\n                self, directory: Union[DirectoryPath, List[DirectoryPath]]\n            ) -&gt; None:\n                super().__init__(directory=directory)\n                self.engine = environment\n\n            def get_template(self, name: str) -&gt; JinjaTemplate:\n\"\"\"Loads the template with the name and returns it.\"\"\"\n                try:\n                    return self.engine.get_template(name=name)\n                except JinjaTemplateNotFound as exc:\n                    raise TemplateNotFoundException(template_name=name) from exc\n\n        def engine_callback(jinja_engine: KiaraTemplateEngine) -&gt; KiaraTemplateEngine:\n            jinja_engine.engine.globals[\"kiara_api\"] = self._kiara_api\n            return jinja_engine\n\n        template_config: TemplateConfig = TemplateConfig(\n            directory=[], engine=KiaraTemplateEngine, engine_callback=engine_callback\n        )\n\n        debug = is_debug() or is_develop()\n\n        cors_config = CORSConfig()\n        exception_handlers: ExceptionHandlersMap = {}\n        # exception_handlers[HTTPException] = http_exception_handler\n        # exception_handlers[Exception] = custom_exception_handler\n        # if is_debug() or is_develop():\n        #     exception_handlers[HTTPException] = logging_exception_handler\n        # exception_handlers[Exception] = http_exception_handler\n\n        async def get_kiara_context(state: State) -&gt; Kiara:\n            if not hasattr(state, \"kiara\"):\n                state.kiara = self._kiara_api.context\n            return cast(Kiara, state.kiara)\n\n        async def get_kiara_api(state: State) -&gt; KiaraAPI:\n            if not hasattr(state, \"kiara_api\"):\n                state.kiara_api = self._kiara_api\n            return cast(KiaraAPI, state.kiara_api)\n\n        async def get_template_registry(state: State) -&gt; TemplateRegistry:\n            if not hasattr(state, \"template_registry\"):\n                state.template_registry = self._template_registry\n            return cast(TemplateRegistry, self._template_registry)\n\n        dependencies = {\n            \"kiara\": Provide(get_kiara_context),\n            \"kiara_api\": Provide(get_kiara_api),\n            \"template_registry\": Provide(get_template_registry),\n        }\n\n        self._app = Starlite(\n            route_handlers=route_handlers,\n            dependencies=dependencies,\n            static_files_config=static_file_config,\n            template_config=template_config,\n            debug=debug,\n            cors_config=cors_config,\n            exception_handlers=exception_handlers,\n            response_class=KiaraModelResponse,\n        )\n        return self._app  # type: ignore\n</code></pre>"},{"location":"reference/kiara_plugin/service/openapi/service/#kiara_plugin.service.openapi.service.KiaraOpenAPIService-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/service/openapi/service/#kiara_plugin.service.openapi.service.KiaraOpenAPIService.app","title":"<code>app() -&gt; Starlite</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/service/openapi/service.py</code> <pre><code>def app(self) -&gt; Starlite:\n    if self._app is not None:\n        return self._app\n\n    from starlite import Router\n\n    value_router = Router(path=\"/data\", route_handlers=[ValueControllerJson])\n    module_router = Router(path=\"/modules\", route_handlers=[ModuleControllerJson])\n    operation_router = Router(\n        path=\"/operations\", route_handlers=[OperationControllerJson]\n    )\n    job_router = Router(path=\"/jobs\", route_handlers=[JobControllerJson])\n    render_router = Router(path=\"/render\", route_handlers=[RenderControllerJson])\n    workflow_router = Router(\n        path=\"/workflows\", route_handlers=[WorkflowControllerJson]\n    )\n    pipeline_router = Router(\n        path=\"/pipelines\", route_handlers=[PipelineControllerJson]\n    )\n\n    # info_router_html = Router(\n    #     path=\"/html/info\", route_handlers=[OperationControllerHtml]\n    # )\n    # Router(path=\"/html/values\", route_handlers=[ValueControllerHtmx])\n    # Router(path=\"/html/operations\", route_handlers=[OperationControllerHtmx])\n\n    route_handlers: List[ControllerRouterHandler] = []\n    route_handlers.append(value_router)\n    route_handlers.append(module_router)\n    route_handlers.append(operation_router)\n    route_handlers.append(job_router)\n    route_handlers.append(render_router)\n    route_handlers.append(workflow_router)\n    route_handlers.append(pipeline_router)\n\n    # route_handlers.append(value_router_htmx)\n    # route_handlers.append(operation_router_htmx)\n\n    static_dir = self._resources_base / \"static\"\n\n    static_file_config = [\n        StaticFilesConfig(directories=[static_dir], path=\"/static\")\n    ]\n    self._template_registry: TemplateRegistry = TemplateRegistry()\n\n    environment = self._template_registry.environment\n\n    class KiaraTemplateEngine(TemplateEngineProtocol[JinjaTemplate]):\n\"\"\"Template engine using the default kiara template registry.\"\"\"\n\n        def __init__(\n            self, directory: Union[DirectoryPath, List[DirectoryPath]]\n        ) -&gt; None:\n            super().__init__(directory=directory)\n            self.engine = environment\n\n        def get_template(self, name: str) -&gt; JinjaTemplate:\n\"\"\"Loads the template with the name and returns it.\"\"\"\n            try:\n                return self.engine.get_template(name=name)\n            except JinjaTemplateNotFound as exc:\n                raise TemplateNotFoundException(template_name=name) from exc\n\n    def engine_callback(jinja_engine: KiaraTemplateEngine) -&gt; KiaraTemplateEngine:\n        jinja_engine.engine.globals[\"kiara_api\"] = self._kiara_api\n        return jinja_engine\n\n    template_config: TemplateConfig = TemplateConfig(\n        directory=[], engine=KiaraTemplateEngine, engine_callback=engine_callback\n    )\n\n    debug = is_debug() or is_develop()\n\n    cors_config = CORSConfig()\n    exception_handlers: ExceptionHandlersMap = {}\n    # exception_handlers[HTTPException] = http_exception_handler\n    # exception_handlers[Exception] = custom_exception_handler\n    # if is_debug() or is_develop():\n    #     exception_handlers[HTTPException] = logging_exception_handler\n    # exception_handlers[Exception] = http_exception_handler\n\n    async def get_kiara_context(state: State) -&gt; Kiara:\n        if not hasattr(state, \"kiara\"):\n            state.kiara = self._kiara_api.context\n        return cast(Kiara, state.kiara)\n\n    async def get_kiara_api(state: State) -&gt; KiaraAPI:\n        if not hasattr(state, \"kiara_api\"):\n            state.kiara_api = self._kiara_api\n        return cast(KiaraAPI, state.kiara_api)\n\n    async def get_template_registry(state: State) -&gt; TemplateRegistry:\n        if not hasattr(state, \"template_registry\"):\n            state.template_registry = self._template_registry\n        return cast(TemplateRegistry, self._template_registry)\n\n    dependencies = {\n        \"kiara\": Provide(get_kiara_context),\n        \"kiara_api\": Provide(get_kiara_api),\n        \"template_registry\": Provide(get_template_registry),\n    }\n\n    self._app = Starlite(\n        route_handlers=route_handlers,\n        dependencies=dependencies,\n        static_files_config=static_file_config,\n        template_config=template_config,\n        debug=debug,\n        cors_config=cors_config,\n        exception_handlers=exception_handlers,\n        response_class=KiaraModelResponse,\n    )\n    return self._app  # type: ignore\n</code></pre>"},{"location":"reference/kiara_plugin/service/openapi/service/#kiara_plugin.service.openapi.service-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/service/openapi/service/#kiara_plugin.service.openapi.service.logging_exception_handler","title":"<code>logging_exception_handler(request: Request, exc: Exception) -&gt; Response</code>","text":"<p>Logs exception and returns appropriate response.</p>"},{"location":"reference/kiara_plugin/service/openapi/service/#kiara_plugin.service.openapi.service.logging_exception_handler--parameters","title":"Parameters","text":"Request <p>The request that caused the exception.</p> exc <p>The exception caught by the Starlite exception handling middleware and passed to the callback.</p>"},{"location":"reference/kiara_plugin/service/openapi/service/#kiara_plugin.service.openapi.service.logging_exception_handler--returns","title":"Returns","text":"<p>Response</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/service/openapi/service.py</code> <pre><code>def logging_exception_handler(request: Request, exc: Exception) -&gt; Response:\n\"\"\"\n    Logs exception and returns appropriate response.\n\n    Parameters\n    ----------\n    request : Request\n        The request that caused the exception.\n    exc :\n        The exception caught by the Starlite exception handling middleware and passed to the\n        callback.\n\n    Returns\n    -------\n    Response\n    \"\"\"\n    logger.error(\"Application Exception\")\n    return create_exception_response(exc)\n</code></pre>"},{"location":"reference/kiara_plugin/service/openapi/controllers/__init__/","title":"controllers","text":""},{"location":"reference/kiara_plugin/service/openapi/controllers/__init__/#kiara_plugin.service.openapi.controllers-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/service/openapi/controllers/__init__/#kiara_plugin.service.openapi.controllers.extract_doc","title":"<code>extract_doc(func: Callable) -&gt; Tuple[Union[str, None], Union[str, None]]</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/service/openapi/controllers/__init__.py</code> <pre><code>def extract_doc(func: Callable) -&gt; Tuple[Union[str, None], Union[str, None]]:\n\n    doc = func.__doc__\n    if not doc:\n        return None, None\n\n    docstring = docstring_parser.parse(doc, DocstringStyle.GOOGLE)\n    summary = docstring.short_description\n    description = docstring.long_description\n    return summary, description\n</code></pre>"},{"location":"reference/kiara_plugin/service/openapi/controllers/__init__/#kiara_plugin.service.openapi.controllers.get","title":"<code>get(*args, **kwargs) -&gt; Callable</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/service/openapi/controllers/__init__.py</code> <pre><code>def get(*args, **kwargs) -&gt; Callable:\n    api_func = kwargs.pop(\"api_func\", None)\n    if api_func:\n        summary, description = extract_doc(api_func)\n        if summary:\n            kwargs[\"summary\"] = summary\n        if description:\n            kwargs[\"description\"] = description\n    return starlite_get(*args, **kwargs)\n</code></pre>"},{"location":"reference/kiara_plugin/service/openapi/controllers/__init__/#kiara_plugin.service.openapi.controllers.post","title":"<code>post(*args, **kwargs) -&gt; Callable</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/service/openapi/controllers/__init__.py</code> <pre><code>def post(*args, **kwargs) -&gt; Callable:\n    api_func = kwargs.pop(\"api_func\", None)\n    if api_func:\n        kwargs[\"summary\"], kwargs[\"description\"] = extract_doc(api_func)\n    return starlite_post(*args, **kwargs)\n</code></pre>"},{"location":"reference/kiara_plugin/service/openapi/controllers/jobs/","title":"jobs","text":""},{"location":"reference/kiara_plugin/service/openapi/controllers/jobs/#kiara_plugin.service.openapi.controllers.jobs-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/service/openapi/controllers/jobs/#kiara_plugin.service.openapi.controllers.jobs.RunJobRequest","title":"<code>RunJobRequest</code>","text":"<p>         Bases: <code>BaseModel</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/service/openapi/controllers/jobs.py</code> <pre><code>class RunJobRequest(BaseModel):\n    class Config:\n        extra = Extra.allow\n\n    operation_id: str = Field(description=\"The id of the operation or module.\")\n    operation_config: Mapping[str, Any] = Field(\n        description=\"The configuration of the operation.\", default_factory=dict\n    )\n    inputs: Mapping[str, Any] = Field(description=\"The job input values.\")\n</code></pre>"},{"location":"reference/kiara_plugin/service/openapi/controllers/jobs/#kiara_plugin.service.openapi.controllers.jobs.RunJobRequest-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/service/openapi/controllers/jobs/#kiara_plugin.service.openapi.controllers.jobs.RunJobRequest.operation_id","title":"<code>operation_id: str = Field(description='The id of the operation or module.')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/service/openapi/controllers/jobs/#kiara_plugin.service.openapi.controllers.jobs.RunJobRequest.operation_config","title":"<code>operation_config: Mapping[str, Any] = Field(description='The configuration of the operation.', default_factory=dict)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/service/openapi/controllers/jobs/#kiara_plugin.service.openapi.controllers.jobs.RunJobRequest.inputs","title":"<code>inputs: Mapping[str, Any] = Field(description='The job input values.')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/service/openapi/controllers/jobs/#kiara_plugin.service.openapi.controllers.jobs.RunJobRequest-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/service/openapi/controllers/jobs/#kiara_plugin.service.openapi.controllers.jobs.RunJobRequest.Config","title":"<code>Config</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/service/openapi/controllers/jobs.py</code> <pre><code>class Config:\n    extra = Extra.allow\n</code></pre>"},{"location":"reference/kiara_plugin/service/openapi/controllers/jobs/#kiara_plugin.service.openapi.controllers.jobs.RunJobRequest.Config-attributes","title":"Attributes","text":"<code>extra = Extra.allow</code> <code>instance-attribute</code> <code>class-attribute</code> \u00b6"},{"location":"reference/kiara_plugin/service/openapi/controllers/jobs/#kiara_plugin.service.openapi.controllers.jobs.JobInfoRequest","title":"<code>JobInfoRequest</code>","text":"<p>         Bases: <code>BaseModel</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/service/openapi/controllers/jobs.py</code> <pre><code>class JobInfoRequest(BaseModel):\n\n    job_id: str = Field(description=\"The id of the job to monitor.\")\n</code></pre>"},{"location":"reference/kiara_plugin/service/openapi/controllers/jobs/#kiara_plugin.service.openapi.controllers.jobs.JobInfoRequest-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/service/openapi/controllers/jobs/#kiara_plugin.service.openapi.controllers.jobs.JobInfoRequest.job_id","title":"<code>job_id: str = Field(description='The id of the job to monitor.')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/service/openapi/controllers/jobs/#kiara_plugin.service.openapi.controllers.jobs.JobControllerJson","title":"<code>JobControllerJson</code>","text":"<p>         Bases: <code>Controller</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/service/openapi/controllers/jobs.py</code> <pre><code>class JobControllerJson(Controller):\n    path = \"/\"\n\n    @post(path=\"/queue_job\", api_func=KiaraAPI.queue_job)\n    async def queue_job(self, kiara_api: KiaraAPI, data: RunJobRequest) -&gt; ActiveJob:\n\n        print(f\"JOB RUN REQUEST: {data.dict()}\")\n\n        try:\n            operation_id = data.operation_id\n            if not data.operation_config:\n                job_id = kiara_api.queue_job(operation=operation_id, inputs=data.inputs)\n            else:\n                manifest = kiara_api.context.create_manifest(\n                    module_or_operation=operation_id, config=data.operation_config\n                )\n                job_id = kiara_api.queue_job(operation=manifest, inputs=data.inputs)\n\n            job = kiara_api.get_job(job_id=job_id)\n            return job\n\n        except Exception as e:\n            import traceback\n\n            traceback.print_exc()\n            raise e\n\n    @get(path=\"/monitor_job/{job_id:str}\", api_func=KiaraAPI.get_job)\n    async def monitor_job(self, kiara_api: KiaraAPI, job_id: str) -&gt; ActiveJob:\n\n        print(f\"MONITOR REQUEST: {job_id}\")\n\n        job = kiara_api.get_job(job_id=job_id)\n\n        return job\n</code></pre>"},{"location":"reference/kiara_plugin/service/openapi/controllers/jobs/#kiara_plugin.service.openapi.controllers.jobs.JobControllerJson-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/service/openapi/controllers/jobs/#kiara_plugin.service.openapi.controllers.jobs.JobControllerJson.path","title":"<code>path = '/'</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/service/openapi/controllers/jobs/#kiara_plugin.service.openapi.controllers.jobs.JobControllerJson-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/service/openapi/controllers/jobs/#kiara_plugin.service.openapi.controllers.jobs.JobControllerJson.queue_job","title":"<code>queue_job(kiara_api: KiaraAPI, data: RunJobRequest) -&gt; ActiveJob</code>  <code>async</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/service/openapi/controllers/jobs.py</code> <pre><code>@post(path=\"/queue_job\", api_func=KiaraAPI.queue_job)\nasync def queue_job(self, kiara_api: KiaraAPI, data: RunJobRequest) -&gt; ActiveJob:\n\n    print(f\"JOB RUN REQUEST: {data.dict()}\")\n\n    try:\n        operation_id = data.operation_id\n        if not data.operation_config:\n            job_id = kiara_api.queue_job(operation=operation_id, inputs=data.inputs)\n        else:\n            manifest = kiara_api.context.create_manifest(\n                module_or_operation=operation_id, config=data.operation_config\n            )\n            job_id = kiara_api.queue_job(operation=manifest, inputs=data.inputs)\n\n        job = kiara_api.get_job(job_id=job_id)\n        return job\n\n    except Exception as e:\n        import traceback\n\n        traceback.print_exc()\n        raise e\n</code></pre>"},{"location":"reference/kiara_plugin/service/openapi/controllers/jobs/#kiara_plugin.service.openapi.controllers.jobs.JobControllerJson.monitor_job","title":"<code>monitor_job(kiara_api: KiaraAPI, job_id: str) -&gt; ActiveJob</code>  <code>async</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/service/openapi/controllers/jobs.py</code> <pre><code>@get(path=\"/monitor_job/{job_id:str}\", api_func=KiaraAPI.get_job)\nasync def monitor_job(self, kiara_api: KiaraAPI, job_id: str) -&gt; ActiveJob:\n\n    print(f\"MONITOR REQUEST: {job_id}\")\n\n    job = kiara_api.get_job(job_id=job_id)\n\n    return job\n</code></pre>"},{"location":"reference/kiara_plugin/service/openapi/controllers/jobs/#kiara_plugin.service.openapi.controllers.jobs-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/service/openapi/controllers/modules/","title":"modules","text":""},{"location":"reference/kiara_plugin/service/openapi/controllers/modules/#kiara_plugin.service.openapi.controllers.modules-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/service/openapi/controllers/modules/#kiara_plugin.service.openapi.controllers.modules.ModuleMatcher","title":"<code>ModuleMatcher</code>","text":"<p>         Bases: <code>BaseModel</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/service/openapi/controllers/modules.py</code> <pre><code>class ModuleMatcher(BaseModel):\n\n    filters: List[str] = Field(\n        description=\"The (optional) filter strings, a module must match all of them to be included in the result.\",\n        default_factory=list,\n    )\n    python_package: Union[str, None] = Field(\n        description=\"If specified, only modules that are contained in this Python package are returned.\",\n        default=None,\n    )\n</code></pre>"},{"location":"reference/kiara_plugin/service/openapi/controllers/modules/#kiara_plugin.service.openapi.controllers.modules.ModuleMatcher-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/service/openapi/controllers/modules/#kiara_plugin.service.openapi.controllers.modules.ModuleMatcher.filters","title":"<code>filters: List[str] = Field(description='The (optional) filter strings, a module must match all of them to be included in the result.', default_factory=list)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/service/openapi/controllers/modules/#kiara_plugin.service.openapi.controllers.modules.ModuleMatcher.python_package","title":"<code>python_package: Union[str, None] = Field(description='If specified, only modules that are contained in this Python package are returned.', default=None)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/service/openapi/controllers/modules/#kiara_plugin.service.openapi.controllers.modules.ModuleControllerJson","title":"<code>ModuleControllerJson</code>","text":"<p>         Bases: <code>Controller</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/service/openapi/controllers/modules.py</code> <pre><code>class ModuleControllerJson(Controller):\n    path = \"/\"\n\n    @post(path=\"/\", api_func=KiaraAPI.retrieve_module_types_info)\n    async def list_module_types(\n        self, kiara_api: KiaraAPI, data: ModuleMatcher\n    ) -&gt; Dict[str, ModuleTypeInfo]:\n\n        filters = data.filters\n        python_package = data.python_package\n\n        module_types = kiara_api.retrieve_module_types_info(\n            *filters, python_package=python_package\n        )\n        return module_types.item_infos  # type: ignore\n\n    @get(path=\"/type_names\", api_func=KiaraAPI.list_module_type_names)\n    async def list_module_type_names(self, kiara_api: KiaraAPI) -&gt; List[str]:\n\"\"\"List the ids of all available operations.\"\"\"\n\n        module_names = kiara_api.list_module_type_names()\n        return module_names\n\n    @get(path=\"/{module_type_name:str}\", api_func=KiaraAPI.retrieve_module_type_info)\n    async def get_module_type_info(\n        self, kiara_api: KiaraAPI, module_type_name: str\n    ) -&gt; ModuleTypeInfo:\n\n        module = kiara_api.retrieve_module_type_info(module_type=module_type_name)\n        return module\n</code></pre>"},{"location":"reference/kiara_plugin/service/openapi/controllers/modules/#kiara_plugin.service.openapi.controllers.modules.ModuleControllerJson-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/service/openapi/controllers/modules/#kiara_plugin.service.openapi.controllers.modules.ModuleControllerJson.path","title":"<code>path = '/'</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/service/openapi/controllers/modules/#kiara_plugin.service.openapi.controllers.modules.ModuleControllerJson-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/service/openapi/controllers/modules/#kiara_plugin.service.openapi.controllers.modules.ModuleControllerJson.list_module_types","title":"<code>list_module_types(kiara_api: KiaraAPI, data: ModuleMatcher) -&gt; Dict[str, ModuleTypeInfo]</code>  <code>async</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/service/openapi/controllers/modules.py</code> <pre><code>@post(path=\"/\", api_func=KiaraAPI.retrieve_module_types_info)\nasync def list_module_types(\n    self, kiara_api: KiaraAPI, data: ModuleMatcher\n) -&gt; Dict[str, ModuleTypeInfo]:\n\n    filters = data.filters\n    python_package = data.python_package\n\n    module_types = kiara_api.retrieve_module_types_info(\n        *filters, python_package=python_package\n    )\n    return module_types.item_infos  # type: ignore\n</code></pre>"},{"location":"reference/kiara_plugin/service/openapi/controllers/modules/#kiara_plugin.service.openapi.controllers.modules.ModuleControllerJson.list_module_type_names","title":"<code>list_module_type_names(kiara_api: KiaraAPI) -&gt; List[str]</code>  <code>async</code>","text":"<p>List the ids of all available operations.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/service/openapi/controllers/modules.py</code> <pre><code>@get(path=\"/type_names\", api_func=KiaraAPI.list_module_type_names)\nasync def list_module_type_names(self, kiara_api: KiaraAPI) -&gt; List[str]:\n\"\"\"List the ids of all available operations.\"\"\"\n\n    module_names = kiara_api.list_module_type_names()\n    return module_names\n</code></pre>"},{"location":"reference/kiara_plugin/service/openapi/controllers/modules/#kiara_plugin.service.openapi.controllers.modules.ModuleControllerJson.get_module_type_info","title":"<code>get_module_type_info(kiara_api: KiaraAPI, module_type_name: str) -&gt; ModuleTypeInfo</code>  <code>async</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/service/openapi/controllers/modules.py</code> <pre><code>@get(path=\"/{module_type_name:str}\", api_func=KiaraAPI.retrieve_module_type_info)\nasync def get_module_type_info(\n    self, kiara_api: KiaraAPI, module_type_name: str\n) -&gt; ModuleTypeInfo:\n\n    module = kiara_api.retrieve_module_type_info(module_type=module_type_name)\n    return module\n</code></pre>"},{"location":"reference/kiara_plugin/service/openapi/controllers/modules/#kiara_plugin.service.openapi.controllers.modules-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/service/openapi/controllers/operations/","title":"operations","text":""},{"location":"reference/kiara_plugin/service/openapi/controllers/operations/#kiara_plugin.service.openapi.controllers.operations-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/service/openapi/controllers/operations/#kiara_plugin.service.openapi.controllers.operations.OperationRequest","title":"<code>OperationRequest</code>","text":"<p>         Bases: <code>BaseModel</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/service/openapi/controllers/operations.py</code> <pre><code>class OperationRequest(BaseModel):\n    element_id: str = Field(description=\"The id of the element to be created.\")\n    operation_id: str = Field(description=\"The id of the operation.\")\n</code></pre>"},{"location":"reference/kiara_plugin/service/openapi/controllers/operations/#kiara_plugin.service.openapi.controllers.operations.OperationRequest-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/service/openapi/controllers/operations/#kiara_plugin.service.openapi.controllers.operations.OperationRequest.element_id","title":"<code>element_id: str = Field(description='The id of the element to be created.')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/service/openapi/controllers/operations/#kiara_plugin.service.openapi.controllers.operations.OperationRequest.operation_id","title":"<code>operation_id: str = Field(description='The id of the operation.')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/service/openapi/controllers/operations/#kiara_plugin.service.openapi.controllers.operations.OperationRunRequest","title":"<code>OperationRunRequest</code>","text":"<p>         Bases: <code>BaseModel</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/service/openapi/controllers/operations.py</code> <pre><code>class OperationRunRequest(BaseModel):\n    class Config:\n        extra = Extra.allow\n\n    element_id: str = Field(description=\"The id of the element to be created.\")\n    operation_id: str = Field(description=\"The id of the operation.\")\n</code></pre>"},{"location":"reference/kiara_plugin/service/openapi/controllers/operations/#kiara_plugin.service.openapi.controllers.operations.OperationRunRequest-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/service/openapi/controllers/operations/#kiara_plugin.service.openapi.controllers.operations.OperationRunRequest.element_id","title":"<code>element_id: str = Field(description='The id of the element to be created.')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/service/openapi/controllers/operations/#kiara_plugin.service.openapi.controllers.operations.OperationRunRequest.operation_id","title":"<code>operation_id: str = Field(description='The id of the operation.')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/service/openapi/controllers/operations/#kiara_plugin.service.openapi.controllers.operations.OperationRunRequest-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/service/openapi/controllers/operations/#kiara_plugin.service.openapi.controllers.operations.OperationRunRequest.Config","title":"<code>Config</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/service/openapi/controllers/operations.py</code> <pre><code>class Config:\n    extra = Extra.allow\n</code></pre>"},{"location":"reference/kiara_plugin/service/openapi/controllers/operations/#kiara_plugin.service.openapi.controllers.operations.OperationRunRequest.Config-attributes","title":"Attributes","text":"<code>extra = Extra.allow</code> <code>instance-attribute</code> <code>class-attribute</code> \u00b6"},{"location":"reference/kiara_plugin/service/openapi/controllers/operations/#kiara_plugin.service.openapi.controllers.operations.MonitorJobRequest","title":"<code>MonitorJobRequest</code>","text":"<p>         Bases: <code>BaseModel</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/service/openapi/controllers/operations.py</code> <pre><code>class MonitorJobRequest(BaseModel):\n\n    element_id: str = Field(description=\"The id of the result element.\")\n    job_id: str = Field(description=\"The id of the job to monitor.\")\n</code></pre>"},{"location":"reference/kiara_plugin/service/openapi/controllers/operations/#kiara_plugin.service.openapi.controllers.operations.MonitorJobRequest-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/service/openapi/controllers/operations/#kiara_plugin.service.openapi.controllers.operations.MonitorJobRequest.element_id","title":"<code>element_id: str = Field(description='The id of the result element.')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/service/openapi/controllers/operations/#kiara_plugin.service.openapi.controllers.operations.MonitorJobRequest.job_id","title":"<code>job_id: str = Field(description='The id of the job to monitor.')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/service/openapi/controllers/operations/#kiara_plugin.service.openapi.controllers.operations.OperationMatcher","title":"<code>OperationMatcher</code>","text":"<p>         Bases: <code>BaseModel</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/service/openapi/controllers/operations.py</code> <pre><code>class OperationMatcher(BaseModel):\n\n    filters: List[str] = Field(\n        description=\"The (optional) filter strings, an operation must match all of them to be included in the result.\",\n        default_factory=list,\n    )\n    include_internal: bool = Field(\n        description=\"Whether to include internal operations in the result.\",\n        default=False,\n    )\n    python_package: Union[str, None] = Field(\n        description=\"If specified, only operations that are contained in this Python package are returned.\",\n        default=None,\n    )\n</code></pre>"},{"location":"reference/kiara_plugin/service/openapi/controllers/operations/#kiara_plugin.service.openapi.controllers.operations.OperationMatcher-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/service/openapi/controllers/operations/#kiara_plugin.service.openapi.controllers.operations.OperationMatcher.filters","title":"<code>filters: List[str] = Field(description='The (optional) filter strings, an operation must match all of them to be included in the result.', default_factory=list)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/service/openapi/controllers/operations/#kiara_plugin.service.openapi.controllers.operations.OperationMatcher.include_internal","title":"<code>include_internal: bool = Field(description='Whether to include internal operations in the result.', default=False)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/service/openapi/controllers/operations/#kiara_plugin.service.openapi.controllers.operations.OperationMatcher.python_package","title":"<code>python_package: Union[str, None] = Field(description='If specified, only operations that are contained in this Python package are returned.', default=None)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/service/openapi/controllers/operations/#kiara_plugin.service.openapi.controllers.operations.OperationControllerJson","title":"<code>OperationControllerJson</code>","text":"<p>         Bases: <code>Controller</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/service/openapi/controllers/operations.py</code> <pre><code>class OperationControllerJson(Controller):\n    path = \"/\"\n\n    @post(path=\"/\", api_func=KiaraAPI.retrieve_operations_info)\n    async def list_operations(\n        self, kiara_api: KiaraAPI, data: OperationMatcher\n    ) -&gt; Dict[str, OperationInfo]:\n\n        filters = data.filters\n        include_internal = data.include_internal\n\n        if data.python_package is not None:\n            python_packages = [data.python_package]\n        else:\n            python_packages = None\n\n        operations = kiara_api.retrieve_operations_info(\n            *filters, include_internal=include_internal, python_packages=python_packages\n        )\n        return operations.item_infos  # type: ignore\n\n    @post(path=\"/ids\", api_func=KiaraAPI.list_operation_ids)\n    async def list_operation_ids(\n        self, kiara_api: KiaraAPI, data: OperationMatcher\n    ) -&gt; List[str]:\n\"\"\"List the ids of all available operations.\"\"\"\n\n        filters = data.filters\n        include_internal = data.include_internal\n\n        if data.python_package is not None:\n            python_packages = [data.python_package]\n        else:\n            python_packages = None\n\n        operation_ids = kiara_api.list_operation_ids(\n            filter=filters,\n            include_internal=include_internal,\n            python_packages=python_packages,\n        )\n        return operation_ids\n\n    @get(path=\"/{operation_id:str}\", api_func=KiaraAPI.retrieve_operation_info)\n    async def get_operation_info(\n        self, kiara_api: KiaraAPI, operation_id: str\n    ) -&gt; OperationInfo:\n\n        op = kiara_api.retrieve_operation_info(operation=operation_id)\n        return op\n</code></pre>"},{"location":"reference/kiara_plugin/service/openapi/controllers/operations/#kiara_plugin.service.openapi.controllers.operations.OperationControllerJson-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/service/openapi/controllers/operations/#kiara_plugin.service.openapi.controllers.operations.OperationControllerJson.path","title":"<code>path = '/'</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/service/openapi/controllers/operations/#kiara_plugin.service.openapi.controllers.operations.OperationControllerJson-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/service/openapi/controllers/operations/#kiara_plugin.service.openapi.controllers.operations.OperationControllerJson.list_operations","title":"<code>list_operations(kiara_api: KiaraAPI, data: OperationMatcher) -&gt; Dict[str, OperationInfo]</code>  <code>async</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/service/openapi/controllers/operations.py</code> <pre><code>@post(path=\"/\", api_func=KiaraAPI.retrieve_operations_info)\nasync def list_operations(\n    self, kiara_api: KiaraAPI, data: OperationMatcher\n) -&gt; Dict[str, OperationInfo]:\n\n    filters = data.filters\n    include_internal = data.include_internal\n\n    if data.python_package is not None:\n        python_packages = [data.python_package]\n    else:\n        python_packages = None\n\n    operations = kiara_api.retrieve_operations_info(\n        *filters, include_internal=include_internal, python_packages=python_packages\n    )\n    return operations.item_infos  # type: ignore\n</code></pre>"},{"location":"reference/kiara_plugin/service/openapi/controllers/operations/#kiara_plugin.service.openapi.controllers.operations.OperationControllerJson.list_operation_ids","title":"<code>list_operation_ids(kiara_api: KiaraAPI, data: OperationMatcher) -&gt; List[str]</code>  <code>async</code>","text":"<p>List the ids of all available operations.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/service/openapi/controllers/operations.py</code> <pre><code>@post(path=\"/ids\", api_func=KiaraAPI.list_operation_ids)\nasync def list_operation_ids(\n    self, kiara_api: KiaraAPI, data: OperationMatcher\n) -&gt; List[str]:\n\"\"\"List the ids of all available operations.\"\"\"\n\n    filters = data.filters\n    include_internal = data.include_internal\n\n    if data.python_package is not None:\n        python_packages = [data.python_package]\n    else:\n        python_packages = None\n\n    operation_ids = kiara_api.list_operation_ids(\n        filter=filters,\n        include_internal=include_internal,\n        python_packages=python_packages,\n    )\n    return operation_ids\n</code></pre>"},{"location":"reference/kiara_plugin/service/openapi/controllers/operations/#kiara_plugin.service.openapi.controllers.operations.OperationControllerJson.get_operation_info","title":"<code>get_operation_info(kiara_api: KiaraAPI, operation_id: str) -&gt; OperationInfo</code>  <code>async</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/service/openapi/controllers/operations.py</code> <pre><code>@get(path=\"/{operation_id:str}\", api_func=KiaraAPI.retrieve_operation_info)\nasync def get_operation_info(\n    self, kiara_api: KiaraAPI, operation_id: str\n) -&gt; OperationInfo:\n\n    op = kiara_api.retrieve_operation_info(operation=operation_id)\n    return op\n</code></pre>"},{"location":"reference/kiara_plugin/service/openapi/controllers/operations/#kiara_plugin.service.openapi.controllers.operations-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/service/openapi/controllers/pipeline/","title":"pipeline","text":""},{"location":"reference/kiara_plugin/service/openapi/controllers/pipeline/#kiara_plugin.service.openapi.controllers.pipeline-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/service/openapi/controllers/pipeline/#kiara_plugin.service.openapi.controllers.pipeline.PipelineMatcher","title":"<code>PipelineMatcher</code>","text":"<p>         Bases: <code>BaseModel</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/service/openapi/controllers/pipeline.py</code> <pre><code>class PipelineMatcher(BaseModel):\n\n    filters: List[str] = Field(\n        description=\"The (optional) filter strings, a pipeline must match all of them to be included in the result.\",\n        default_factory=list,\n    )\n</code></pre>"},{"location":"reference/kiara_plugin/service/openapi/controllers/pipeline/#kiara_plugin.service.openapi.controllers.pipeline.PipelineMatcher-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/service/openapi/controllers/pipeline/#kiara_plugin.service.openapi.controllers.pipeline.PipelineMatcher.filters","title":"<code>filters: List[str] = Field(description='The (optional) filter strings, a pipeline must match all of them to be included in the result.', default_factory=list)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/service/openapi/controllers/pipeline/#kiara_plugin.service.openapi.controllers.pipeline.PipelineControllerJson","title":"<code>PipelineControllerJson</code>","text":"<p>         Bases: <code>Controller</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/service/openapi/controllers/pipeline.py</code> <pre><code>class PipelineControllerJson(Controller):\n    path = \"/\"\n\n    @get(path=\"/structure/{pipeline:str}\", api_func=get_pipeline_config)\n    async def get_pipeline_structure(\n        self, kiara_api: KiaraAPI, pipeline: str\n    ) -&gt; PipelineStructureInfo:\n\n        print(f\"PIPELINE: {pipeline}\")\n        pipeline_config = get_pipeline_config(pipeline=pipeline)\n        info = PipelineStructureInfo.create_from_instance(\n            kiara=kiara_api.context, instance=pipeline_config.structure\n        )\n        return info\n\n    @get(path=\"/list\", api_func=get_pipeline_config)\n    async def list_pipelines(self, kiara_api: KiaraAPI) -&gt; List[str]:\n\n        pipelines = kiara_api.list_operations(operation_types=\"pipeline\")\n        print(pipelines)\n        return list(pipelines.keys())\n</code></pre>"},{"location":"reference/kiara_plugin/service/openapi/controllers/pipeline/#kiara_plugin.service.openapi.controllers.pipeline.PipelineControllerJson-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/service/openapi/controllers/pipeline/#kiara_plugin.service.openapi.controllers.pipeline.PipelineControllerJson.path","title":"<code>path = '/'</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/service/openapi/controllers/pipeline/#kiara_plugin.service.openapi.controllers.pipeline.PipelineControllerJson-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/service/openapi/controllers/pipeline/#kiara_plugin.service.openapi.controllers.pipeline.PipelineControllerJson.get_pipeline_structure","title":"<code>get_pipeline_structure(kiara_api: KiaraAPI, pipeline: str) -&gt; PipelineStructureInfo</code>  <code>async</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/service/openapi/controllers/pipeline.py</code> <pre><code>@get(path=\"/structure/{pipeline:str}\", api_func=get_pipeline_config)\nasync def get_pipeline_structure(\n    self, kiara_api: KiaraAPI, pipeline: str\n) -&gt; PipelineStructureInfo:\n\n    print(f\"PIPELINE: {pipeline}\")\n    pipeline_config = get_pipeline_config(pipeline=pipeline)\n    info = PipelineStructureInfo.create_from_instance(\n        kiara=kiara_api.context, instance=pipeline_config.structure\n    )\n    return info\n</code></pre>"},{"location":"reference/kiara_plugin/service/openapi/controllers/pipeline/#kiara_plugin.service.openapi.controllers.pipeline.PipelineControllerJson.list_pipelines","title":"<code>list_pipelines(kiara_api: KiaraAPI) -&gt; List[str]</code>  <code>async</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/service/openapi/controllers/pipeline.py</code> <pre><code>@get(path=\"/list\", api_func=get_pipeline_config)\nasync def list_pipelines(self, kiara_api: KiaraAPI) -&gt; List[str]:\n\n    pipelines = kiara_api.list_operations(operation_types=\"pipeline\")\n    print(pipelines)\n    return list(pipelines.keys())\n</code></pre>"},{"location":"reference/kiara_plugin/service/openapi/controllers/pipeline/#kiara_plugin.service.openapi.controllers.pipeline-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/service/openapi/controllers/render/","title":"render","text":""},{"location":"reference/kiara_plugin/service/openapi/controllers/render/#kiara_plugin.service.openapi.controllers.render-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/service/openapi/controllers/render/#kiara_plugin.service.openapi.controllers.render.InputsValidationData","title":"<code>InputsValidationData</code>","text":"<p>         Bases: <code>BaseModel</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/service/openapi/controllers/render.py</code> <pre><code>class InputsValidationData(BaseModel):\n\n    inputs: Mapping[str, Any] = Field(description=\"The provided inputs.\")\n    inputs_schema: Mapping[str, ValueSchema] = Field(description=\"The inputs schemas.\")\n</code></pre>"},{"location":"reference/kiara_plugin/service/openapi/controllers/render/#kiara_plugin.service.openapi.controllers.render.InputsValidationData-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/service/openapi/controllers/render/#kiara_plugin.service.openapi.controllers.render.InputsValidationData.inputs","title":"<code>inputs: Mapping[str, Any] = Field(description='The provided inputs.')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/service/openapi/controllers/render/#kiara_plugin.service.openapi.controllers.render.InputsValidationData.inputs_schema","title":"<code>inputs_schema: Mapping[str, ValueSchema] = Field(description='The inputs schemas.')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/service/openapi/controllers/render/#kiara_plugin.service.openapi.controllers.render.RenderControllerJson","title":"<code>RenderControllerJson</code>","text":"<p>         Bases: <code>Controller</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/service/openapi/controllers/render.py</code> <pre><code>class RenderControllerJson(Controller):\n    path = \"/\"\n\n    @get(\n        path=\"/create_render_manifest/{data_type:str}\",\n        api_func=KiaraAPI.assemble_render_pipeline,\n    )\n    async def create_render_manifest(\n        self, kiara_api: KiaraAPI, data_type: str\n    ) -&gt; Operation:\n\"\"\"Create a render manifest for the specified data type.\"\"\"\n\n        filters = [\"select_columns\"]\n        operation = kiara_api.assemble_render_pipeline(\n            data_type=data_type, target_format=\"html\", filters=filters\n        )\n        return operation\n\n    @post(path=\"/value/{value:str}/{target_format:str}\", api_func=KiaraAPI.render_value)\n    async def render_data(\n        self,\n        kiara_api: KiaraAPI,\n        value: str,\n        target_format: str = \"html\",\n        data: Union[None, Dict[str, Any]] = None,\n    ) -&gt; RenderValueResult:\n\"\"\"Queue a render job for the specified value id or alias.\n\n        Arguments:\n            value: the value id or alias\n            target_format: the render format\n            data: (optional) target &amp; data type specific render configuration\n\n        Returns:\n            the render result\n        \"\"\"\n\n        # filters = [\"select_columns\", \"drop_columns\"]\n        filters: List[str] = []\n        v = kiara_api.get_value(value)\n        result = kiara_api.render_value(\n            value=v, target_format=target_format, filters=filters, render_config=data\n        )\n        return result\n\n    @post(\n        path=\"/value_info/{value:str}/{target_format:str}\",\n        summary=\"Render value info as HTML\",\n    )\n    async def render_operation_info(\n        self,\n        kiara_api: KiaraAPI,\n        value: str,\n        target_format: str = \"html\",\n        data: Union[Dict[str, Any], None] = None,\n    ) -&gt; str:\n\n        print(f\"RENDER VALUE INFO REQUEST: {value}\")\n\n        value_info = kiara_api.retrieve_value_info(value)\n        html = value_info.create_html()\n        return html\n</code></pre>"},{"location":"reference/kiara_plugin/service/openapi/controllers/render/#kiara_plugin.service.openapi.controllers.render.RenderControllerJson-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/service/openapi/controllers/render/#kiara_plugin.service.openapi.controllers.render.RenderControllerJson.path","title":"<code>path = '/'</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/service/openapi/controllers/render/#kiara_plugin.service.openapi.controllers.render.RenderControllerJson-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/service/openapi/controllers/render/#kiara_plugin.service.openapi.controllers.render.RenderControllerJson.create_render_manifest","title":"<code>create_render_manifest(kiara_api: KiaraAPI, data_type: str) -&gt; Operation</code>  <code>async</code>","text":"<p>Create a render manifest for the specified data type.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/service/openapi/controllers/render.py</code> <pre><code>@get(\n    path=\"/create_render_manifest/{data_type:str}\",\n    api_func=KiaraAPI.assemble_render_pipeline,\n)\nasync def create_render_manifest(\n    self, kiara_api: KiaraAPI, data_type: str\n) -&gt; Operation:\n\"\"\"Create a render manifest for the specified data type.\"\"\"\n\n    filters = [\"select_columns\"]\n    operation = kiara_api.assemble_render_pipeline(\n        data_type=data_type, target_format=\"html\", filters=filters\n    )\n    return operation\n</code></pre>"},{"location":"reference/kiara_plugin/service/openapi/controllers/render/#kiara_plugin.service.openapi.controllers.render.RenderControllerJson.render_data","title":"<code>render_data(kiara_api: KiaraAPI, value: str, target_format: str = 'html', data: Union[None, Dict[str, Any]] = None) -&gt; RenderValueResult</code>  <code>async</code>","text":"<p>Queue a render job for the specified value id or alias.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>str</code> <p>the value id or alias</p> required <code>target_format</code> <code>str</code> <p>the render format</p> <code>'html'</code> <code>data</code> <code>Union[None, Dict[str, Any]]</code> <p>(optional) target &amp; data type specific render configuration</p> <code>None</code> <p>Returns:</p> Type Description <code>RenderValueResult</code> <p>the render result</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/service/openapi/controllers/render.py</code> <pre><code>@post(path=\"/value/{value:str}/{target_format:str}\", api_func=KiaraAPI.render_value)\nasync def render_data(\n    self,\n    kiara_api: KiaraAPI,\n    value: str,\n    target_format: str = \"html\",\n    data: Union[None, Dict[str, Any]] = None,\n) -&gt; RenderValueResult:\n\"\"\"Queue a render job for the specified value id or alias.\n\n    Arguments:\n        value: the value id or alias\n        target_format: the render format\n        data: (optional) target &amp; data type specific render configuration\n\n    Returns:\n        the render result\n    \"\"\"\n\n    # filters = [\"select_columns\", \"drop_columns\"]\n    filters: List[str] = []\n    v = kiara_api.get_value(value)\n    result = kiara_api.render_value(\n        value=v, target_format=target_format, filters=filters, render_config=data\n    )\n    return result\n</code></pre>"},{"location":"reference/kiara_plugin/service/openapi/controllers/render/#kiara_plugin.service.openapi.controllers.render.RenderControllerJson.render_operation_info","title":"<code>render_operation_info(kiara_api: KiaraAPI, value: str, target_format: str = 'html', data: Union[Dict[str, Any], None] = None) -&gt; str</code>  <code>async</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/service/openapi/controllers/render.py</code> <pre><code>@post(\n    path=\"/value_info/{value:str}/{target_format:str}\",\n    summary=\"Render value info as HTML\",\n)\nasync def render_operation_info(\n    self,\n    kiara_api: KiaraAPI,\n    value: str,\n    target_format: str = \"html\",\n    data: Union[Dict[str, Any], None] = None,\n) -&gt; str:\n\n    print(f\"RENDER VALUE INFO REQUEST: {value}\")\n\n    value_info = kiara_api.retrieve_value_info(value)\n    html = value_info.create_html()\n    return html\n</code></pre>"},{"location":"reference/kiara_plugin/service/openapi/controllers/render/#kiara_plugin.service.openapi.controllers.render-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/service/openapi/controllers/values/","title":"values","text":""},{"location":"reference/kiara_plugin/service/openapi/controllers/values/#kiara_plugin.service.openapi.controllers.values-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/service/openapi/controllers/values/#kiara_plugin.service.openapi.controllers.values.InputsValidationData","title":"<code>InputsValidationData</code>","text":"<p>         Bases: <code>BaseModel</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/service/openapi/controllers/values.py</code> <pre><code>class InputsValidationData(BaseModel):\n\n    inputs: Mapping[str, Any] = Field(description=\"The provided inputs.\")\n    inputs_schema: Mapping[str, ValueSchema] = Field(description=\"The inputs schemas.\")\n</code></pre>"},{"location":"reference/kiara_plugin/service/openapi/controllers/values/#kiara_plugin.service.openapi.controllers.values.InputsValidationData-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/service/openapi/controllers/values/#kiara_plugin.service.openapi.controllers.values.InputsValidationData.inputs","title":"<code>inputs: Mapping[str, Any] = Field(description='The provided inputs.')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/service/openapi/controllers/values/#kiara_plugin.service.openapi.controllers.values.InputsValidationData.inputs_schema","title":"<code>inputs_schema: Mapping[str, ValueSchema] = Field(description='The inputs schemas.')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/service/openapi/controllers/values/#kiara_plugin.service.openapi.controllers.values.ValueControllerJson","title":"<code>ValueControllerJson</code>","text":"<p>         Bases: <code>Controller</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/service/openapi/controllers/values.py</code> <pre><code>class ValueControllerJson(Controller):\n    path = \"/\"\n\n    @get(path=\"/ids\", api_func=KiaraAPI.list_value_ids)\n    async def list_value_ids(self, kiara_api: KiaraAPI) -&gt; List[uuid.UUID]:\n\n        result = kiara_api.list_value_ids()\n        return result\n\n    @get(path=\"/value_info/{value: str}\", api_func=KiaraAPI.retrieve_value_info)\n    async def get_value_info(self, kiara_api: KiaraAPI, value: str) -&gt; ValueInfo:\n\n        value_info = kiara_api.retrieve_value_info(value=value)\n        return value_info\n\n    # @post(path=\"/values\", api_func=KiaraAPI.retrieve_values_info)\n    # async def find_values(\n    #     self, kiara_api: KiaraAPI, data: ValueMatcher\n    # ) -&gt; Dict[str, ValueInfo]:\n    #\n    #     matcher_data = data.dict()\n    #\n    #     result = kiara_api.retrieve_values_info(**matcher_data).item_infos\n    #     return result  # type: ignore\n\n    @post(path=\"/values_info\", api_func=KiaraAPI.retrieve_values_info)\n    async def get_values_info(\n        self, kiara_api: KiaraAPI, data: ValueMatcher\n    ) -&gt; Dict[str, ValueInfo]:\n\n        matcher_data = data.dict()\n\n        result = kiara_api.retrieve_values_info(**matcher_data)\n        return result.item_infos  # type: ignore\n\n    @get(path=\"/type/{data_type:str}/values\", api_func=KiaraAPI.list_values)\n    async def find_values_of_type(\n        self, kiara_api: KiaraAPI, data_type: str\n    ) -&gt; Dict[str, Value]:\n\n        matcher = ValueMatcher(data_types=[data_type])\n\n        result = kiara_api.list_values(**matcher.dict())\n        return result  # type: ignore\n        # return {str(k): v for k, v in result.items()}\n\n    @get(\n        path=\"/type/{data_type:str}/values_info\",\n        summary=\"List values info of specific data type.\",\n    )\n    async def find_values_info_of_type(\n        self, kiara_api: KiaraAPI, data_type: str\n    ) -&gt; ValuesInfo:\n\n        matcher = ValueMatcher(data_types=[data_type])\n\n        result = kiara_api.retrieve_values_info(**matcher.dict())\n        return result\n\n    @post(path=\"/alias_names\", api_func=KiaraAPI.list_alias_names)\n    async def list_alias_names(\n        self, kiara_api: KiaraAPI, data: ValueMatcher\n    ) -&gt; List[str]:\n\n        matcher_data = data.dict()\n        result = kiara_api.list_alias_names(**matcher_data)\n        return result\n\n    @post(path=\"/aliases\", api_func=KiaraAPI.list_aliases)\n    async def list_aliases(\n        self, kiara_api: KiaraAPI, data: ValueMatcher\n    ) -&gt; Dict[str, Value]:\n\n        matcher_data = data.dict()\n\n        result = kiara_api.list_aliases(**matcher_data)\n        return result  # type: ignore\n\n    @post(path=\"/aliases_info\", api_func=KiaraAPI.retrieve_aliases_info)\n    async def list_aliases_info(\n        self, kiara_api: KiaraAPI, data: ValueMatcher\n    ) -&gt; Dict[str, ValueInfo]:\n\n        if data is None:\n            matcher_data = {}\n        else:\n            matcher_data = data.dict()\n\n        result = kiara_api.retrieve_aliases_info(**matcher_data)\n        return result.item_infos  # type: ignore\n\n    @get(path=\"/type/{data_type:str}/aliases\", api_func=KiaraAPI.list_aliases)\n    async def find_value_aliases_of_type(\n        self, kiara_api: KiaraAPI, data_type: str\n    ) -&gt; Dict[str, Value]:\n\n        matcher = ValueMatcher(data_types=[data_type], has_alias=True)\n\n        result = kiara_api.list_aliases(**matcher.dict())\n        return result  # type: ignore\n\n    @get(path=\"/type/{data_type:str}/alias_names\", api_func=KiaraAPI.list_alias_names)\n    async def find_value_aliase_names_of_type(\n        self, kiara_api: KiaraAPI, data_type: str\n    ) -&gt; List[str]:\n        matcher = ValueMatcher(data_types=[data_type], has_alias=True)\n\n        result = kiara_api.list_alias_names(**matcher.dict())\n        return result\n\n    @get(\n        path=\"/type/{data_type:str}/aliases_info\",\n        api_func=KiaraAPI.retrieve_aliases_info,\n    )\n    async def find_value_aliases_info_of_type(\n        self, kiara_api: KiaraAPI, data_type: str\n    ) -&gt; ValuesInfo:\n\n        matcher = ValueMatcher(data_types=[data_type], has_alias=True)\n\n        result = kiara_api.retrieve_aliases_info(**matcher.dict())\n        return result\n\n    @get(\n        path=\"/serialized/{value:uuid}\",\n        summary=\"Retrieve the serialized form of the values data.\",\n    )\n    async def retrieve_data(\n        self, kiara_api: KiaraAPI, value: Union[str, uuid.UUID]\n    ) -&gt; SerializedData:\n\n        _value = kiara_api.get_value(value)\n        return _value.serialized_data\n\n    async def filter_data(self, kiara: Kiara, value):\n        raise NotImplementedError()\n\n    @post(path=\"/validate/inputs\", summary=\"Validate inputs against a schema.\")\n    async def validate_inputs(\n        self, kiara_api: KiaraAPI, data: InputsValidationData\n    ) -&gt; Dict[str, str]:\n\n        print(\"VALIDATE REQUEST\")\n        try:\n            value_map = kiara_api.context.data_registry.create_valuemap(\n                data=data.inputs, schema=data.inputs_schema\n            )\n            return value_map.check_invalid()\n        except InvalidValuesException as ive:\n            return dict(ive.invalid_inputs)\n\n    @get(path=\"/lineage/{value:str}\", summary=\"Retrieve the lineage data for a value.\")\n    async def get_value_lineage(\n        self, kiara_api: KiaraAPI, value: str\n    ) -&gt; Dict[str, Any]:\n\n        print(f\"LINEAGE REQUEST: {value}\")\n        _value = kiara_api.get_value(value=value)\n        try:\n            graph: DiGraph = _value.lineage.module_graph\n            result = json_graph.node_link_data(graph)\n            return result\n        except Exception as e:\n            import traceback\n\n            traceback.print_exc()\n            raise e\n</code></pre>"},{"location":"reference/kiara_plugin/service/openapi/controllers/values/#kiara_plugin.service.openapi.controllers.values.ValueControllerJson-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/service/openapi/controllers/values/#kiara_plugin.service.openapi.controllers.values.ValueControllerJson.path","title":"<code>path = '/'</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/service/openapi/controllers/values/#kiara_plugin.service.openapi.controllers.values.ValueControllerJson-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/service/openapi/controllers/values/#kiara_plugin.service.openapi.controllers.values.ValueControllerJson.list_value_ids","title":"<code>list_value_ids(kiara_api: KiaraAPI) -&gt; List[uuid.UUID]</code>  <code>async</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/service/openapi/controllers/values.py</code> <pre><code>@get(path=\"/ids\", api_func=KiaraAPI.list_value_ids)\nasync def list_value_ids(self, kiara_api: KiaraAPI) -&gt; List[uuid.UUID]:\n\n    result = kiara_api.list_value_ids()\n    return result\n</code></pre>"},{"location":"reference/kiara_plugin/service/openapi/controllers/values/#kiara_plugin.service.openapi.controllers.values.ValueControllerJson.get_value_info","title":"<code>get_value_info(kiara_api: KiaraAPI, value: str) -&gt; ValueInfo</code>  <code>async</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/service/openapi/controllers/values.py</code> <pre><code>@get(path=\"/value_info/{value: str}\", api_func=KiaraAPI.retrieve_value_info)\nasync def get_value_info(self, kiara_api: KiaraAPI, value: str) -&gt; ValueInfo:\n\n    value_info = kiara_api.retrieve_value_info(value=value)\n    return value_info\n</code></pre>"},{"location":"reference/kiara_plugin/service/openapi/controllers/values/#kiara_plugin.service.openapi.controllers.values.ValueControllerJson.get_values_info","title":"<code>get_values_info(kiara_api: KiaraAPI, data: ValueMatcher) -&gt; Dict[str, ValueInfo]</code>  <code>async</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/service/openapi/controllers/values.py</code> <pre><code>@post(path=\"/values_info\", api_func=KiaraAPI.retrieve_values_info)\nasync def get_values_info(\n    self, kiara_api: KiaraAPI, data: ValueMatcher\n) -&gt; Dict[str, ValueInfo]:\n\n    matcher_data = data.dict()\n\n    result = kiara_api.retrieve_values_info(**matcher_data)\n    return result.item_infos  # type: ignore\n</code></pre>"},{"location":"reference/kiara_plugin/service/openapi/controllers/values/#kiara_plugin.service.openapi.controllers.values.ValueControllerJson.find_values_of_type","title":"<code>find_values_of_type(kiara_api: KiaraAPI, data_type: str) -&gt; Dict[str, Value]</code>  <code>async</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/service/openapi/controllers/values.py</code> <pre><code>@get(path=\"/type/{data_type:str}/values\", api_func=KiaraAPI.list_values)\nasync def find_values_of_type(\n    self, kiara_api: KiaraAPI, data_type: str\n) -&gt; Dict[str, Value]:\n\n    matcher = ValueMatcher(data_types=[data_type])\n\n    result = kiara_api.list_values(**matcher.dict())\n    return result  # type: ignore\n</code></pre>"},{"location":"reference/kiara_plugin/service/openapi/controllers/values/#kiara_plugin.service.openapi.controllers.values.ValueControllerJson.find_values_info_of_type","title":"<code>find_values_info_of_type(kiara_api: KiaraAPI, data_type: str) -&gt; ValuesInfo</code>  <code>async</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/service/openapi/controllers/values.py</code> <pre><code>@get(\n    path=\"/type/{data_type:str}/values_info\",\n    summary=\"List values info of specific data type.\",\n)\nasync def find_values_info_of_type(\n    self, kiara_api: KiaraAPI, data_type: str\n) -&gt; ValuesInfo:\n\n    matcher = ValueMatcher(data_types=[data_type])\n\n    result = kiara_api.retrieve_values_info(**matcher.dict())\n    return result\n</code></pre>"},{"location":"reference/kiara_plugin/service/openapi/controllers/values/#kiara_plugin.service.openapi.controllers.values.ValueControllerJson.list_alias_names","title":"<code>list_alias_names(kiara_api: KiaraAPI, data: ValueMatcher) -&gt; List[str]</code>  <code>async</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/service/openapi/controllers/values.py</code> <pre><code>@post(path=\"/alias_names\", api_func=KiaraAPI.list_alias_names)\nasync def list_alias_names(\n    self, kiara_api: KiaraAPI, data: ValueMatcher\n) -&gt; List[str]:\n\n    matcher_data = data.dict()\n    result = kiara_api.list_alias_names(**matcher_data)\n    return result\n</code></pre>"},{"location":"reference/kiara_plugin/service/openapi/controllers/values/#kiara_plugin.service.openapi.controllers.values.ValueControllerJson.list_aliases","title":"<code>list_aliases(kiara_api: KiaraAPI, data: ValueMatcher) -&gt; Dict[str, Value]</code>  <code>async</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/service/openapi/controllers/values.py</code> <pre><code>@post(path=\"/aliases\", api_func=KiaraAPI.list_aliases)\nasync def list_aliases(\n    self, kiara_api: KiaraAPI, data: ValueMatcher\n) -&gt; Dict[str, Value]:\n\n    matcher_data = data.dict()\n\n    result = kiara_api.list_aliases(**matcher_data)\n    return result  # type: ignore\n</code></pre>"},{"location":"reference/kiara_plugin/service/openapi/controllers/values/#kiara_plugin.service.openapi.controllers.values.ValueControllerJson.list_aliases_info","title":"<code>list_aliases_info(kiara_api: KiaraAPI, data: ValueMatcher) -&gt; Dict[str, ValueInfo]</code>  <code>async</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/service/openapi/controllers/values.py</code> <pre><code>@post(path=\"/aliases_info\", api_func=KiaraAPI.retrieve_aliases_info)\nasync def list_aliases_info(\n    self, kiara_api: KiaraAPI, data: ValueMatcher\n) -&gt; Dict[str, ValueInfo]:\n\n    if data is None:\n        matcher_data = {}\n    else:\n        matcher_data = data.dict()\n\n    result = kiara_api.retrieve_aliases_info(**matcher_data)\n    return result.item_infos  # type: ignore\n</code></pre>"},{"location":"reference/kiara_plugin/service/openapi/controllers/values/#kiara_plugin.service.openapi.controllers.values.ValueControllerJson.find_value_aliases_of_type","title":"<code>find_value_aliases_of_type(kiara_api: KiaraAPI, data_type: str) -&gt; Dict[str, Value]</code>  <code>async</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/service/openapi/controllers/values.py</code> <pre><code>@get(path=\"/type/{data_type:str}/aliases\", api_func=KiaraAPI.list_aliases)\nasync def find_value_aliases_of_type(\n    self, kiara_api: KiaraAPI, data_type: str\n) -&gt; Dict[str, Value]:\n\n    matcher = ValueMatcher(data_types=[data_type], has_alias=True)\n\n    result = kiara_api.list_aliases(**matcher.dict())\n    return result  # type: ignore\n</code></pre>"},{"location":"reference/kiara_plugin/service/openapi/controllers/values/#kiara_plugin.service.openapi.controllers.values.ValueControllerJson.find_value_aliase_names_of_type","title":"<code>find_value_aliase_names_of_type(kiara_api: KiaraAPI, data_type: str) -&gt; List[str]</code>  <code>async</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/service/openapi/controllers/values.py</code> <pre><code>@get(path=\"/type/{data_type:str}/alias_names\", api_func=KiaraAPI.list_alias_names)\nasync def find_value_aliase_names_of_type(\n    self, kiara_api: KiaraAPI, data_type: str\n) -&gt; List[str]:\n    matcher = ValueMatcher(data_types=[data_type], has_alias=True)\n\n    result = kiara_api.list_alias_names(**matcher.dict())\n    return result\n</code></pre>"},{"location":"reference/kiara_plugin/service/openapi/controllers/values/#kiara_plugin.service.openapi.controllers.values.ValueControllerJson.find_value_aliases_info_of_type","title":"<code>find_value_aliases_info_of_type(kiara_api: KiaraAPI, data_type: str) -&gt; ValuesInfo</code>  <code>async</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/service/openapi/controllers/values.py</code> <pre><code>@get(\n    path=\"/type/{data_type:str}/aliases_info\",\n    api_func=KiaraAPI.retrieve_aliases_info,\n)\nasync def find_value_aliases_info_of_type(\n    self, kiara_api: KiaraAPI, data_type: str\n) -&gt; ValuesInfo:\n\n    matcher = ValueMatcher(data_types=[data_type], has_alias=True)\n\n    result = kiara_api.retrieve_aliases_info(**matcher.dict())\n    return result\n</code></pre>"},{"location":"reference/kiara_plugin/service/openapi/controllers/values/#kiara_plugin.service.openapi.controllers.values.ValueControllerJson.retrieve_data","title":"<code>retrieve_data(kiara_api: KiaraAPI, value: Union[str, uuid.UUID]) -&gt; SerializedData</code>  <code>async</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/service/openapi/controllers/values.py</code> <pre><code>@get(\n    path=\"/serialized/{value:uuid}\",\n    summary=\"Retrieve the serialized form of the values data.\",\n)\nasync def retrieve_data(\n    self, kiara_api: KiaraAPI, value: Union[str, uuid.UUID]\n) -&gt; SerializedData:\n\n    _value = kiara_api.get_value(value)\n    return _value.serialized_data\n</code></pre>"},{"location":"reference/kiara_plugin/service/openapi/controllers/values/#kiara_plugin.service.openapi.controllers.values.ValueControllerJson.filter_data","title":"<code>filter_data(kiara: Kiara, value: Kiara)</code>  <code>async</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/service/openapi/controllers/values.py</code> <pre><code>async def filter_data(self, kiara: Kiara, value):\n    raise NotImplementedError()\n</code></pre>"},{"location":"reference/kiara_plugin/service/openapi/controllers/values/#kiara_plugin.service.openapi.controllers.values.ValueControllerJson.validate_inputs","title":"<code>validate_inputs(kiara_api: KiaraAPI, data: InputsValidationData) -&gt; Dict[str, str]</code>  <code>async</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/service/openapi/controllers/values.py</code> <pre><code>@post(path=\"/validate/inputs\", summary=\"Validate inputs against a schema.\")\nasync def validate_inputs(\n    self, kiara_api: KiaraAPI, data: InputsValidationData\n) -&gt; Dict[str, str]:\n\n    print(\"VALIDATE REQUEST\")\n    try:\n        value_map = kiara_api.context.data_registry.create_valuemap(\n            data=data.inputs, schema=data.inputs_schema\n        )\n        return value_map.check_invalid()\n    except InvalidValuesException as ive:\n        return dict(ive.invalid_inputs)\n</code></pre>"},{"location":"reference/kiara_plugin/service/openapi/controllers/values/#kiara_plugin.service.openapi.controllers.values.ValueControllerJson.get_value_lineage","title":"<code>get_value_lineage(kiara_api: KiaraAPI, value: str) -&gt; Dict[str, Any]</code>  <code>async</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/service/openapi/controllers/values.py</code> <pre><code>@get(path=\"/lineage/{value:str}\", summary=\"Retrieve the lineage data for a value.\")\nasync def get_value_lineage(\n    self, kiara_api: KiaraAPI, value: str\n) -&gt; Dict[str, Any]:\n\n    print(f\"LINEAGE REQUEST: {value}\")\n    _value = kiara_api.get_value(value=value)\n    try:\n        graph: DiGraph = _value.lineage.module_graph\n        result = json_graph.node_link_data(graph)\n        return result\n    except Exception as e:\n        import traceback\n\n        traceback.print_exc()\n        raise e\n</code></pre>"},{"location":"reference/kiara_plugin/service/openapi/controllers/values/#kiara_plugin.service.openapi.controllers.values-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/service/openapi/controllers/workflows/","title":"workflows","text":""},{"location":"reference/kiara_plugin/service/openapi/controllers/workflows/#kiara_plugin.service.openapi.controllers.workflows-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/service/openapi/controllers/workflows/#kiara_plugin.service.openapi.controllers.workflows.WorkflowMatcher","title":"<code>WorkflowMatcher</code>","text":"<p>         Bases: <code>BaseModel</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/service/openapi/controllers/workflows.py</code> <pre><code>class WorkflowMatcher(BaseModel):\n\n    filters: List[str] = Field(\n        description=\"The (optional) filter strings, an operation must match all of them to be included in the result.\",\n        default_factory=list,\n    )\n</code></pre>"},{"location":"reference/kiara_plugin/service/openapi/controllers/workflows/#kiara_plugin.service.openapi.controllers.workflows.WorkflowMatcher-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/service/openapi/controllers/workflows/#kiara_plugin.service.openapi.controllers.workflows.WorkflowMatcher.filters","title":"<code>filters: List[str] = Field(description='The (optional) filter strings, an operation must match all of them to be included in the result.', default_factory=list)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/service/openapi/controllers/workflows/#kiara_plugin.service.openapi.controllers.workflows.WorkflowControllerJson","title":"<code>WorkflowControllerJson</code>","text":"<p>         Bases: <code>Controller</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/service/openapi/controllers/workflows.py</code> <pre><code>class WorkflowControllerJson(Controller):\n    path = \"/\"\n\n    @post(path=\"/ids\", api_func=KiaraAPI.retrieve_workflows_info)\n    async def list_workflows(\n        self, kiara_api: KiaraAPI, data: Union[WorkflowMatcher, None] = None\n    ) -&gt; Dict[str, WorkflowInfo]:\n\n        # if data is None:\n        #     filters: List[str] = []\n        # else:\n        #     filters = data.filters\n\n        result = kiara_api.retrieve_workflows_info().item_infos\n        return result  # type: ignore\n\n    @post(path=\"/aliases\", api_func=KiaraAPI.list_workflow_alias_names)\n    async def list_workflow_aliases(\n        self, kiara_api: KiaraAPI, data: Union[WorkflowMatcher, None] = None\n    ) -&gt; List[str]:\n\n        # if data is None:\n        #     filters: List[str] = []\n        # else:\n        #     filters = data.filters\n\n        result = kiara_api.list_workflow_alias_names()\n        return result\n\n    @get(\n        path=\"/workflow_info/{workflow: str}\", api_func=KiaraAPI.retrieve_workflow_info\n    )\n    async def get_workflow_info(\n        self, kiara_api: KiaraAPI, workflow: str\n    ) -&gt; WorkflowInfo:\n\n        print(f\"INFO: {workflow}\")\n        workflow_info = kiara_api.retrieve_workflow_info(workflow=workflow)\n        return workflow_info\n</code></pre>"},{"location":"reference/kiara_plugin/service/openapi/controllers/workflows/#kiara_plugin.service.openapi.controllers.workflows.WorkflowControllerJson-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/service/openapi/controllers/workflows/#kiara_plugin.service.openapi.controllers.workflows.WorkflowControllerJson.path","title":"<code>path = '/'</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/service/openapi/controllers/workflows/#kiara_plugin.service.openapi.controllers.workflows.WorkflowControllerJson-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/service/openapi/controllers/workflows/#kiara_plugin.service.openapi.controllers.workflows.WorkflowControllerJson.list_workflows","title":"<code>list_workflows(kiara_api: KiaraAPI, data: Union[WorkflowMatcher, None] = None) -&gt; Dict[str, WorkflowInfo]</code>  <code>async</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/service/openapi/controllers/workflows.py</code> <pre><code>@post(path=\"/ids\", api_func=KiaraAPI.retrieve_workflows_info)\nasync def list_workflows(\n    self, kiara_api: KiaraAPI, data: Union[WorkflowMatcher, None] = None\n) -&gt; Dict[str, WorkflowInfo]:\n\n    # if data is None:\n    #     filters: List[str] = []\n    # else:\n    #     filters = data.filters\n\n    result = kiara_api.retrieve_workflows_info().item_infos\n    return result  # type: ignore\n</code></pre>"},{"location":"reference/kiara_plugin/service/openapi/controllers/workflows/#kiara_plugin.service.openapi.controllers.workflows.WorkflowControllerJson.list_workflow_aliases","title":"<code>list_workflow_aliases(kiara_api: KiaraAPI, data: Union[WorkflowMatcher, None] = None) -&gt; List[str]</code>  <code>async</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/service/openapi/controllers/workflows.py</code> <pre><code>@post(path=\"/aliases\", api_func=KiaraAPI.list_workflow_alias_names)\nasync def list_workflow_aliases(\n    self, kiara_api: KiaraAPI, data: Union[WorkflowMatcher, None] = None\n) -&gt; List[str]:\n\n    # if data is None:\n    #     filters: List[str] = []\n    # else:\n    #     filters = data.filters\n\n    result = kiara_api.list_workflow_alias_names()\n    return result\n</code></pre>"},{"location":"reference/kiara_plugin/service/openapi/controllers/workflows/#kiara_plugin.service.openapi.controllers.workflows.WorkflowControllerJson.get_workflow_info","title":"<code>get_workflow_info(kiara_api: KiaraAPI, workflow: str) -&gt; WorkflowInfo</code>  <code>async</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/service/openapi/controllers/workflows.py</code> <pre><code>@get(\n    path=\"/workflow_info/{workflow: str}\", api_func=KiaraAPI.retrieve_workflow_info\n)\nasync def get_workflow_info(\n    self, kiara_api: KiaraAPI, workflow: str\n) -&gt; WorkflowInfo:\n\n    print(f\"INFO: {workflow}\")\n    workflow_info = kiara_api.retrieve_workflow_info(workflow=workflow)\n    return workflow_info\n</code></pre>"},{"location":"reference/kiara_plugin/service/openapi/controllers/workflows/#kiara_plugin.service.openapi.controllers.workflows-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/service/pipelines/__init__/","title":"pipelines","text":"<p>Default (empty) module that is used as a base path for pipelines contained in this package.</p>"}]}